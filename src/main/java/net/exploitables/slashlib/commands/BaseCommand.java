package net.exploitables.slashlib.commands;

import discord4j.core.object.command.ApplicationCommand;
import discord4j.core.object.command.ApplicationCommandOption;
import discord4j.discordjson.json.ApplicationCommandRequest;
import discord4j.discordjson.json.ImmutableApplicationCommandRequest;
import discord4j.rest.util.Permission;
import discord4j.rest.util.PermissionSet;
import reactor.util.annotation.Nullable;

import java.util.*;

/**
 * A class which represents all types of Slash Commands. This class should not be directly extended.
 */
public abstract class BaseCommand {
    // Command Name
    private final String name;
    // Command Description
    private final String description;
    // never null: The type of command this is (chat, user, message)
    private final ApplicationCommand.Type commandType;
    // guild IDs this command is restricted to (null for global)
    @Nullable
    private List<Long> guildIDs;
    // If anyone can use this command by default
    private boolean defaultPermission;
    // Permissions needed by the bot
    private PermissionSet botPermissions;
    // Discord Permissions needed by the user who executes the command
    private PermissionSet userDiscordPermissions;
    // If the command can be used in DMs
    private boolean usableInDMs;

    // the command's ID in the Discord API, if global (null if unset / not global)
    @Nullable
    private String commandGlobalID;
    // the command's Discord API IDs in each guild it is restricted to, if guild-restricted (null if not guild-restricted)
    @Nullable
    private Map<Long, String> commandGuildIDs;

    protected BaseCommand(String name,
                          String description,
                          @Nullable ApplicationCommandOption.Type type,
                          ApplicationCommand.Type commandType) {
        this(name, description, type, commandType, null);
    }

    protected BaseCommand(String name,
                          String description,
                          @Nullable ApplicationCommandOption.Type type,
                          ApplicationCommand.Type commandType,
                          @Nullable List<Long> guildIDs) {
        this.name = name;
        this.description = description;
        this.guildIDs = guildIDs;
        this.commandType = commandType;

        this.defaultPermission = true;
        this.botPermissions = PermissionSet.none();
        this.userDiscordPermissions = PermissionSet.none();
        this.usableInDMs = false;

        this.commandGlobalID = null;

        if (guildIDs == null) {
            this.commandGuildIDs = null;
        } else {
            this.commandGuildIDs = new HashMap<>();
        }
    }

    public abstract ApplicationCommandRequest asRequest();

    /**
     * @return a starting {@link ImmutableApplicationCommandRequest.Builder} with common properties
     */
    protected ImmutableApplicationCommandRequest.Builder buildBaseRequest() {
        ImmutableApplicationCommandRequest.Builder builder = ApplicationCommandRequest.builder()
                .type(this.getCommandType().getValue())
                .name(this.getName())
                .description(this.getDescription());
        if (!this.isDefaultPermission()) { // Avoid the need to check false against an absent possible
            builder.defaultPermission(false);
        }
        return builder;
    }

    /**
     * Set that this command requires a permission to be set for users to call it.
     */
    protected void setDefaultPermissionFalse() {
        this.defaultPermission = false;
    }

    /**
     * Set that this command can be used in DMs.
     */
    protected void setUsableInDMs() {
        this.usableInDMs = true;
    }

    /**
     * Set the permissions the bot needs to execute this command.
     *
     * @param permissions a unique list of Discord permissions
     */
    protected void setBotPermissions(Permission... permissions) {
        this.botPermissions = PermissionSet.of(permissions);
    }

    /**
     * Set the Discord permissions a user needs to execute this command.
     *
     * @param permissions a unique list of Discord permissions
     */
    protected void setUserDiscordPermissions(Permission... permissions) {
        this.userDiscordPermissions = PermissionSet.of(permissions);
    }

    public String getName() { return name; }
    public String getDescription() { return description; }
    public ApplicationCommand.Type getCommandType() { return commandType; }

    /**
     * Fetches the list of guild IDs this command is restricted to. (null if global.)
     * @return Guild IDs this command is restricted to (null if global).
     */
    @Nullable
    public List<Long> getGuildIDs() { return guildIDs; }

    /**
     * Adds the specified guild IDs to the list of guilds to which this command usage is restricted.
     * Warning: This must be executed during command initialization to prevent errors.
     * Also, running this method makes the command cease being global.
     * Global and guild-restricted are mutually exclusive traits of a command
     * (determined by {@link BaseCommand#isGlobal()}).
     * @param guildIDs Additional Guild ID(s) to restrict this command to. (Adds up to previous calls.)
     */
    protected void restrictToGuildIDs(Long... guildIDsToAdd) {
        if (guildIDs == null) {
            Set<Long> guildIDsToAddSet = new HashSet<>(Arrays.asList(guildIDsToAdd));
            guildIDs = new ArrayList<>(guildIDsToAddSet);
        } else {
            for (Long guildIDToAdd : guildIDsToAdd) {
                if (!guildIDs.contains(guildIDToAdd)) {
                    guildIDs.add(guildIDToAdd);
                }
            }
        }
    }

    /**
     * Returns whether this command is available globally.
     * @return true if global, false if restricted to one or more guilds.
     */
    public boolean isGlobal() {
        return guildIDs == null || guildIDs.size() < 1;
    }

    public boolean isDefaultPermission() { return defaultPermission; }
    public PermissionSet getBotPermissions() { return botPermissions; }
    public PermissionSet getUserDiscordPermissions() { return userDiscordPermissions; }
    public boolean isUsableInDMs() { return usableInDMs; }

    /**
     * Returns this command's ID in the Discord API, if it is global. This is set during command registration.
     * (null if this command is not global, or command registration did not occur yet.)
     * @return Command's ID (if global and registered) or null (if not global/not yet registered)
     */
    @Nullable
    public String getCommandGlobalID() { return commandGlobalID; }

    /**
     * Returns this command's Discord API IDs in each guild ID it is restricted to, if guild-restricted. This is set during
     * command registration.
     * (null if this command is not guild-restricted; empty map if guild-restricted but registration did not occur yet.)
     * @return Command's IDs as a map (k: guild ID, v: command's ID in that guild) if guild-restricted, or null
     * if not guild-restricted (or command registration did not occur yet).
     */
    @Nullable
    public Map<Long, String> getCommandGuildIDs() { return commandGuildIDs; }

    /**
     * Returns this command's Discord API ID in a specific guild, or empty optional if it is not guild-restricted, if it
     * isn't available in that specific guild, or if command registration did not occur yet.
     * @param guildID The guild ID to check the command's ID in.
     * @return The command's ID in that guild, or empty optional if it is not restricted to that guild.
     */
    public Optional<String> getCommandGuildID(long guildID) {
        if (commandGuildIDs == null) return Optional.empty();
        return Optional.ofNullable(commandGuildIDs.get(guildID));
    }

    /**
     * Sets this command's global ID in the Discord API.
     * This method should only be run during command registration by this library.
     * @param cmdGlobalID The command's global ID in the Discord API.
     */
    public void setCommandGlobalID(String cmdGlobalID) { this.commandGlobalID = cmdGlobalID; }

    /**
     * Sets this command's Discord API ID in a specific guild.
     * This method should only be run during command registration by this library.
     * @param guildID The ID of the Guild in which we will be setting this command's ID.
     * @param cmdGuildID The ID of the command in the given guild.
     */
    public void setCommandGuildID(Long guildID, String cmdGuildID) {
        if (this.commandGuildIDs == null) this.commandGuildIDs = new HashMap<>();
        this.commandGuildIDs.put(guildID, cmdGuildID);
    }
}
