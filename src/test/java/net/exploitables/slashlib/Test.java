package net.exploitables.slashlib;

import discord4j.core.DiscordClient;
import discord4j.core.GatewayDiscordClient;
import discord4j.core.event.EventDispatcher;
import net.exploitables.slashlib.commands.BaseCommand;
import net.exploitables.slashlib.commands.Command;
import net.exploitables.slashlib.commands.GroupCommand;
import net.exploitables.slashlib.commands.SubCommand;
import net.exploitables.slashlib.context.SlashCommandContext;
import net.exploitables.slashlib.context.SlashCommandContextBuilder;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

class PingCommand extends Command {
    public PingCommand(String name, String description) {
        super(name, description);
    }

    @Override
    public Mono<SlashCommandContext> execute(SlashCommandContext context) {
        return context.getEvent().reply("Reply!").withEphemeral(false).thenReturn(context);
    }

    @Override
    public SlashCommandContextBuilder setRequestData(SlashCommandContextBuilder context) {
        return context;
    }
}

class TopLevelGroup extends GroupCommand {
    private TopLevelGroup() {
        super("top", "top level group command");
    }

    // I only advise that group commands have a create method, to prevent errors within a constructor.
    public static TopLevelGroup create() {
        TopLevelGroup topLevelGroup = new TopLevelGroup();
        topLevelGroup.addSubCommand(new AnyLevelSubCommand());
        topLevelGroup.addSubCommand(MidLevelGroup.create());
        return topLevelGroup;
    }
}

class MidLevelGroup extends GroupCommand {
    private MidLevelGroup() {
        super("mid", "mid level group command");
    }

    public static MidLevelGroup create() {
        MidLevelGroup midLevelGroup = new MidLevelGroup();
        midLevelGroup.addSubCommand(new AnyLevelSubCommand());
        return midLevelGroup;
    }
}

class AnyLevelSubCommand extends SubCommand {
    public AnyLevelSubCommand() {
        super("sc", "a sub command that can be on the second or third level");
    }

    @Override
    public Mono<SlashCommandContext> execute(SlashCommandContext context) {
        return context.getEvent().reply("Sub Command").withEphemeral(false).thenReturn(context);
    }

    @Override
    public SlashCommandContextBuilder setRequestData(SlashCommandContextBuilder context) {
        return context;
    }
}


public class Test {
    public static void main(String[] args) {
        // Setup Discord4J and connect events *before* logging in
        DiscordClient client = DiscordClient.create(args[0]);
        EventDispatcher dispatcher = EventDispatcher.builder().build();

        // Setup Commands and SlashLib
        List<BaseCommand> commands = new ArrayList<>();
        commands.add(new PingCommand("ping", "get a pong"));
        commands.add(TopLevelGroup.create());
        SlashLib slashLib = SlashLib.create(commands);
        slashLib.getCommandListener().registerAsListener(dispatcher);

        // Login to discord
        GatewayDiscordClient gateway = client.gateway()
            .setEventDispatcher(dispatcher)
            .login()
            .block();

        // Register Slash Commands
        Long applicationId = client.getApplicationId().block();
        Objects.requireNonNull(applicationId);
        slashLib.getCommandRegister().registerSlashCommands(client.getApplicationService(), applicationId).block();

        // Block until disconnect
        //noinspection ConstantConditions
        gateway.onDisconnect().block();
    }
}
