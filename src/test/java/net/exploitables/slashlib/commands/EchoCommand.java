package net.exploitables.slashlib.commands;

import net.exploitables.slashlib.context.ChatInputInteractionContext;
import net.exploitables.slashlib.context.ChatInputInteractionContextBuilder;
import net.exploitables.slashlib.utility.OptionBuilder;
import net.exploitables.slashlib.utility.OptionsList;
import reactor.core.publisher.Mono;

class EchoCommandOptions {
    final String content;
    final boolean ephemeral;

    EchoCommandOptions(OptionsList optionsList) {
        // Should always be present, so it should be safe to call get
        //noinspection OptionalGetWithoutIsPresent
        this.content = optionsList.getString("content").get();
        // This may not be present, so we will provide a default value for our use case
        this.ephemeral = optionsList.getBoolean("private").orElse(false);
    }
}

public class EchoCommand extends TopCommand {
    public EchoCommand() {
        super("echo", "echo a message back to you");
        this.addOption(OptionBuilder.requiredString("content", "echos this content back as a response"));
        this.addOption(OptionBuilder.optionalBoolean("private", "reply with a message only you can see"));
    }

    @Override
    public Mono<ChatInputInteractionContext> executeChat(ChatInputInteractionContext context) {
        EchoCommandOptions options = new EchoCommandOptions(context.getOptions());
        return context.getEvent().reply(options.content).withEphemeral(options.ephemeral).thenReturn(context);
    }

    @Override
    public ChatInputInteractionContextBuilder setRequestData(ChatInputInteractionContextBuilder context) {
        return context;
    }
}
