package net.exploitables.slashlib.context;

import discord4j.core.event.domain.interaction.MessageInteractionEvent;
import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.Message;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.object.entity.channel.TopLevelGuildChannel;
import reactor.core.publisher.Mono;

/**
 * A builder class provided to user commands before the command logic is called.
 */
public class MessageInteractionContextBuilder extends ContextBuilder {
    final MessageInteractionEvent event;

    Guild guild;
    MessageChannel messageChannel;
    TopLevelGuildChannel guildChannel;
    Message targetMessage;
    User messageAuthor;
    Member messageAuthorAsMember;
    User callingUser;
    Member callingUserAsMember;

    public MessageInteractionContextBuilder(MessageInteractionEvent event) {
        this.event = event;

        this.guild = null;
        this.messageChannel = null;
        this.guildChannel = null;
        this.targetMessage = null;
        this.messageAuthor = null;
        this.messageAuthorAsMember = null;
        this.callingUser = null;
        this.callingUserAsMember = null;
    }

    public MessageInteractionContext build() {
        return new MessageInteractionContext(this);
    }

    /**
     * Mark that the guild is required for command execution.
     * This method will collect the:
     * guild
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageInteractionContextBuilder requireGuild() {
        requiredMonoList.add(event.getInteraction().getGuild()
            .doOnNext(guild -> this.guild = guild)
            .map(guild -> 1));
        return this;
    }

    /**
     * Mark that the {@link MessageChannel} the command was called in is required for command execution.
     * This method will collect the:
     * messageChannel
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageInteractionContextBuilder requireMessageChannel() {
        requiredMonoList.add(event.getInteraction().getChannel()
            .doOnNext(channel -> this.messageChannel = channel)
            .map(channel -> 1));
        return this;
    }

    /**
     * Mark that the {@link GuildChannel} the command was called in is required for command execution.
     * This method will collect the:
     * messageChannel
     * guildChannel
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageInteractionContextBuilder requireGuildChannel() {
        requiredMonoList.add(event.getInteraction().getChannel()
            .doOnNext(channel -> this.messageChannel = channel)
            .ofType(TopLevelGuildChannel.class)
            .doOnNext(channel -> this.guildChannel = channel)
            .map(channel -> 1));
        return this;
    }

    /**
     * Mark that the {@link Message} the command was called on is required for command execution.
     * This method will collect the:
     * message
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageInteractionContextBuilder requireMessage() {
        requiredMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} who authored the message this command
     *  was called on is required for command execution.
     * This method will collect the:
     * message
     * messageAuthor
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageInteractionContextBuilder requireMessageAuthor() {
        requiredMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .flatMap(message -> Mono.justOrEmpty(message.getAuthor()))
            .doOnNext(user -> this.messageAuthor = user)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} who authored the message this command
     *  was called on is required for command execution.
     * This method will collect the:
     * guild
     * message
     * messageAuthor
     * messageAuthorAsMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageInteractionContextBuilder requireMessageAuthorAsMember() {
        // As of D4J v3.2.0 message#getAuthorAsMember() will get the guild
        requiredMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .flatMap(message -> message.getGuild()
                .doOnNext(guild -> this.guild = guild)
                .flatMap(guild -> Mono.justOrEmpty(message.getAuthor())
                    .doOnNext(author -> this.messageAuthor = author)
                    .flatMap(author -> guild.getMemberById(author.getId()))
                    .doOnNext(member -> this.messageAuthorAsMember = member)))
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link User} the command was called by is required for command execution.
     * This method will collect the:
     * callingUser
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageInteractionContextBuilder requireCallingUser() {
        requiredMonoList.add(Mono.justOrEmpty(event.getInteraction().getUser())
            .doOnNext(user -> this.callingUser = user)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} the command was called by is required for command execution.
     * This method will collect the:
     * callingUserAsMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageInteractionContextBuilder requireCallingMember() {
        requiredMonoList.add(Mono.justOrEmpty(event.getInteraction().getMember())
            .doOnNext(member -> this.callingUserAsMember = member)
            .map(member -> 1));
        return this;
    }
}
