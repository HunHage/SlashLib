package net.exploitables.slashlib.utility;

import discord4j.core.object.command.ApplicationCommandInteraction;
import discord4j.core.object.command.ApplicationCommandInteractionOption;
import discord4j.core.object.command.ApplicationCommandInteractionOptionValue;
import discord4j.core.object.entity.Role;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.Channel;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Optional;

/**
 * A wrapper class for a list of {@link ApplicationCommandInteractionOption}.
 *
 * Since Top level commands have their options contained within an {@link ApplicationCommandInteraction}
 *  but subcommands have their options contained within an {@link ApplicationCommandInteractionOption}.
 *
 * Since access to these needs to be uniform this wrapper class adds functionality to the options list.
 */
public class OptionsList {
    private final List<ApplicationCommandInteractionOption> options;

    public OptionsList(List<ApplicationCommandInteractionOption> options) {
        this.options = options;
    }

    /**
     * @return the list of options this instance wraps around
     */
    public List<ApplicationCommandInteractionOption> getOptions() {
        return this.options;
    }

    /**
     * Get the entry corresponding to the provided option name if it exists.
     *
     * @param name the name of the option to get
     * @return a present optional if an option exists with the provided name
     */
    public Optional<ApplicationCommandInteractionOption> getOption(String name) {
        return this.options.stream().filter(option -> option.getName().equals(name)).findFirst();
    }

    /**
     * Get the value of the option with the specified name, for a String option type.
     *
     * @param name the name of the option to get
     * @return a present {@link String} if an option exists with the provided name *and* has a value
     */
    public Optional<String> getString(String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asString);
    }

    /**
     * Get the value of the option with the specified name, for an integer option type.
     *
     * @param name the name of the option to get
     * @return a present {@link Long} if an option exists with the provided name *and* has a value
     */
    public Optional<Long> getInteger(String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asLong);
    }

    /**
     * Get the value of the option with the specified name, for a Boolean option type.
     *
     * @param name the name of the option to get
     * @return a present {@link Boolean} if an option exists with the provided name *and* has a value
     */
    public Optional<Boolean> getBoolean(String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asBoolean);
    }

    /**
     * Get the value of the option with the specified name, for a User option type.
     *
     * @param name the name of the option to get
     * @return a non empty {@link Mono<User>} if an option exists with the provided name *and* has a value
     */
    public Mono<User> getUser(String name) {
        return Mono.justOrEmpty(getOption(name)
                .flatMap(ApplicationCommandInteractionOption::getValue))
            .flatMap(ApplicationCommandInteractionOptionValue::asUser);
    }

    /**
     * Get the value of the option with the specified name, for a channel option type.
     *
     * @param name the name of the option to get
     * @return a non empty {@link Mono<Channel>} if an option exists with the provided name *and* has a value
     */
    public Mono<Channel> getChannel(String name) {
        return Mono.justOrEmpty(getOption(name)
                .flatMap(ApplicationCommandInteractionOption::getValue))
            .flatMap(ApplicationCommandInteractionOptionValue::asChannel);
    }

    /**
     * Get the value of the option with the specified name, for a Role option type.
     *
     * @param name the name of the option to get
     * @return a non empty {@link Mono<Role>} if an option exists with the provided name *and* has a value
     */
    public Mono<Role> getRole(String name) {
        return Mono.justOrEmpty(getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue))
        .flatMap(ApplicationCommandInteractionOptionValue::asRole);
    }
}
