package net.exploitables.slashlib.context;

import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.object.entity.channel.TopLevelGuildChannel;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;
import reactor.util.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;

/**
 * Core logic for all extending builder classes.
 *
 * Classes such as:
 * {@link discord4j.core.event.domain.interaction.ChatInputInteractionEvent}
 * {@link discord4j.core.event.domain.interaction.MessageInteractionEvent}
 * {@link discord4j.core.event.domain.interaction.UserInteractionEvent}
 * do not have a superclass which offers logic for getting the base fields in this class.
 * As such the subclasses that implement this class to handle events must provide the
 *  logic to access and set the fields in this class.
 *
 * It is a bit messy, but results in consistent access during the command lifecycle.
 */
public abstract class ContextBuilder {
    // List of Monos which will be zipped when building to gather all required data, throws an exception if empty
    protected final List<Mono<Integer>> requiredMonoList;
    // List of Monos which will be zipped when building to gather all optional data, doesn't throw an exception if empty
    protected final List<Mono<Integer>> requestMonoList;
    // If all requested data was retrieved successfully
    boolean allRequestedDataExists;

    @Nullable Guild guild;
    @Nullable MessageChannel messageChannel;
    @Nullable TopLevelGuildChannel topLevelGuildChannel;
    final @NonNull User user;
    @Nullable Member member;
    @Nullable User botUser;
    @Nullable Member botMember;

    /**
     * Create a new context builder, the user must be specified as all
     *  interaction events provide the user through D4J.
     *
     * @param user the user who called the interaction
     */
    ContextBuilder(@NonNull User user) {
        this.requiredMonoList = new ArrayList<>();
        this.requestMonoList = new ArrayList<>();
        this.allRequestedDataExists = false;

        // Due to how collectData() works an error is thrown if Mono#zip() returns empty
        // This is because some methods of collecting data like requireGuildChannel() can go empty without error
        // So at least one entry must exist for commands that require no data
        this.requiredMonoList.add(Mono.just(1));
        // The same behavior is with the optional data, however to make an "all good" property available
        //  this cannot go empty either.
        this.requestMonoList.add(Mono.just(1));

        this.guild = null;
        this.messageChannel = null;
        this.topLevelGuildChannel = null;
        this.user = user;
        this.member = null;
        this.botUser = null;
        this.botMember = null;
    }

    /**
     * @return a new immutable {@link Context} from this builder.
     */
    public abstract Context build();

    /**
     * Collect the required and optional requested data for this context instance.
     *
     * @return this instance
     */
    public Mono<ContextBuilder> collectData() {
        // Collect required data, throwing an exception on failure
        Mono<Integer> requiredDataMonoZip = Mono.zip(requiredMonoList, (array) -> 1)
            .switchIfEmpty(Mono.error(new DataMissingException(this, "Couldn't collect all data!")));
        // Collect optional data, marking that not all optional data was retrieved on failure
        Mono<Integer> requestDataMonoZip = Mono.zip(requestMonoList, (array) -> 1)
            .doOnNext(_int -> allRequestedDataExists = true);

        return Mono.zip(requiredDataMonoZip, requestDataMonoZip)
            .thenReturn(this);
    }

    // Provide these methods as abstract as they must be implemented by
    //  subclasses since the methods to get the data isn't common between events
    public abstract ContextBuilder requireGuild();
    public abstract ContextBuilder requestGuild();
    public abstract ContextBuilder requireMessageChannel();
    public abstract ContextBuilder requestMessageChannel();
    public abstract ContextBuilder requireTopLevelGuildChannel();
    public abstract ContextBuilder requestTopLevelGuildChannel();
    public abstract ContextBuilder requireMember();
    public abstract ContextBuilder requestMember();
    public abstract ContextBuilder requireBotUser();
    public abstract ContextBuilder requestBotUser();
    public abstract ContextBuilder requireBotMember();
    public abstract ContextBuilder requestBotMember();
}
