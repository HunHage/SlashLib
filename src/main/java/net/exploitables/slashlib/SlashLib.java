package net.exploitables.slashlib;

import discord4j.core.GatewayDiscordClient;
import discord4j.core.event.EventDispatcher;
import discord4j.core.event.domain.interaction.SlashCommandEvent;
import net.exploitables.slashlib.commands.BaseCommand;
import net.exploitables.slashlib.context.SlashCommandContext;
import net.exploitables.slashlib.context.SlashCommandContextBuilder;
import reactor.core.publisher.Mono;

import java.util.List;

public class SlashLib {
    private CommandRegister commandRegister;

    private SlashLib() {
        this.commandRegister = null;
    }

    SlashLib(SlashLibBuilder builder) {
        this.commandRegister = builder.commandRegister;
    }

    public static SlashLib create(List<BaseCommand> commands) {
        SlashLib slashLib = new SlashLib();
        slashLib.commandRegister = CommandRegister.create(commands);
        return slashLib;
    }

    SlashLib create(SlashLibBuilder builder) {
        return new SlashLib(builder);
    }

    public Mono<SlashCommandContext> receiveSlashCommandEvent(SlashCommandEvent event) {
        return Mono.justOrEmpty(event.getInteraction().getCommandInteraction())
            .map(aci -> commandRegister.getCommands().searchForCommand(event, aci))
            .flatMap(pair -> pair.getKey().setRequestData(pair.getValue())
                .collectData()
                .map(SlashCommandContextBuilder::build)
                .flatMap(context -> pair.getKey().execute(context)));
    }

    public void registerAsListener(GatewayDiscordClient gateway) {
        gateway.on(SlashCommandEvent.class, this::receiveSlashCommandEvent).subscribe();
    }

    public void registerAsListener(EventDispatcher eventDispatcher) {
        eventDispatcher.on(SlashCommandEvent.class, this::receiveSlashCommandEvent).subscribe();
    }

    public CommandRegister getCommandRegister() { return commandRegister; }
}
