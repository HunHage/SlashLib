package net.exploitables.slashlib.context;

import discord4j.core.event.domain.interaction.MessageInteractionEvent;
import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.Message;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.object.entity.channel.TopLevelGuildChannel;
import reactor.core.publisher.Mono;

/**
 * A builder class provided to user commands before the command logic is called.
 */
public class MessageContextBuilder extends ContextBuilder {
    protected final MessageInteractionEvent event;

    Message targetMessage;
    User messageAuthor;
    Member messageAuthorAsMember;

    public MessageContextBuilder(MessageInteractionEvent event) {
        super(event.getInteraction().getUser());

        this.event                  = event;

        this.targetMessage          = null;
        this.messageAuthor          = null;
        this.messageAuthorAsMember  = null;
    }

    @Override
    public MessageContext build() {
        return new MessageContext(this);
    }

    /**
     * Mark that the {@link Guild} the command was called in is required for command execution.
     * This method will collect the:
     * guild
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public MessageContextBuilder requireGuild() {
        requiredMonoList.add(event.getInteraction().getGuild()
            .doOnNext(guild -> this.guild = guild)
            .map(guild -> 1));
        return this;
    }

    /**
     * Mark that the {@link Guild} the command was called in is optionally used for command execution.
     * This method will collect the:
     * guild
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    @Override
    public MessageContextBuilder requestGuild() {
        requestMonoList.add(event.getInteraction().getGuild()
            .doOnNext(guild -> this.guild = guild)
            .map(guild -> 1));
        return this;
    }

    /**
     * Mark that the {@link MessageChannel} the command was called in is required for command execution.
     * This method will collect the:
     * messageChannel
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public MessageContextBuilder requireMessageChannel() {
        requiredMonoList.add(event.getInteraction().getChannel()
            .doOnNext(messageChannel -> this.messageChannel = messageChannel)
            .map(messageChannel -> 1));
        return this;
    }

    /**
     * Mark that the {@link MessageChannel} the command was called in is optionally used for command execution.
     * This method will collect the:
     * messageChannel
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    @Override
    public MessageContextBuilder requestMessageChannel() {
        requestMonoList.add(event.getInteraction().getChannel()
            .doOnNext(messageChannel -> this.messageChannel = messageChannel)
            .map(messageChannel -> 1));
        return this;
    }

    /**
     * Mark that the {@link GuildChannel} the command was called in is required for command execution.
     * This method will collect the:
     * messageChannel
     * guildChannel
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public MessageContextBuilder requireTopLevelGuildChannel() {
        requiredMonoList.add(event.getInteraction().getChannel()
            .doOnNext(messageChannel -> this.messageChannel = messageChannel)
            .ofType(TopLevelGuildChannel.class)
            .doOnNext(guildChannel -> this.topLevelGuildChannel = guildChannel)
            .map(guildChannel -> 1));
        return this;
    }

    /**
     * Mark that the {@link GuildChannel} the command was called in is optionally used for command execution.
     * This method will collect the:
     * messageChannel
     * guildChannel
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    @Override
    public MessageContextBuilder requestTopLevelGuildChannel() {
        requestMonoList.add(event.getInteraction().getChannel()
            .doOnNext(messageChannel -> this.messageChannel = messageChannel)
            .ofType(TopLevelGuildChannel.class)
            .doOnNext(guildChannel -> this.topLevelGuildChannel = guildChannel)
            .map(guildChannel -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} the command was called by is required for command execution.
     * This method will collect the:
     * callingUserAsMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public MessageContextBuilder requireMember() {
        requiredMonoList.add(Mono.justOrEmpty(event.getInteraction().getMember())
            .doOnNext(member -> this.member = member)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} the command was called by is optionally used for command execution.
     * This method will collect the:
     * callingUserAsMember
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    @Override
    public MessageContextBuilder requestMember() {
        requestMonoList.add(Mono.justOrEmpty(event.getInteraction().getMember())
            .doOnNext(member -> this.member = member)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Message} the command was called on is required for command execution.
     * This method will collect the:
     * message
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageContextBuilder requireMessage() {
        requiredMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Message} the command was called on is optionally used for command execution.
     * This method will collect the
     * message
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    public MessageContextBuilder requestMessage() {
        requestMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} who authored the message this command
     *  was called on is required for command execution.
     * This method will collect the:
     * message
     * messageAuthor
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageContextBuilder requireMessageAuthor() {
        requiredMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .flatMap(message -> Mono.justOrEmpty(message.getAuthor()))
            .doOnNext(user -> this.messageAuthor = user)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} who authored the message this command
     *  was called on is optionally used for command execution.
     * This method will collect the:
     * message
     * messageAuthor
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    public MessageContextBuilder requestMessageAuthor() {
        requestMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .flatMap(message -> Mono.justOrEmpty(message.getAuthor()))
            .doOnNext(user -> this.messageAuthor = user)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} who authored the message this command
     *  was called on is required for command execution.
     * This method will collect the:
     * guild
     * message
     * messageAuthor
     * messageAuthorAsMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageContextBuilder requireMessageAuthorAsMember() {
        // As of D4J v3.2.0 message#getAuthorAsMember() will get the guild
        requiredMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .flatMap(message -> message.getGuild()
                .doOnNext(guild -> this.guild = guild)
                .flatMap(guild -> Mono.justOrEmpty(message.getAuthor())
                    .doOnNext(author -> this.messageAuthor = author)
                    .flatMap(author -> guild.getMemberById(author.getId()))
                    .doOnNext(member -> this.messageAuthorAsMember = member)))
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} who authored the message this command
     *  was called on is optionally used for command execution.
     * This method will collect the:
     * guild
     * message
     * messageAuthor
     * messageAuthorAsMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageContextBuilder requestMessageAuthorAsMember() {
        // As of D4J v3.2.0 message#getAuthorAsMember() will get the guild
        requestMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .flatMap(message -> message.getGuild()
                .doOnNext(guild -> this.guild = guild)
                .flatMap(guild -> Mono.justOrEmpty(message.getAuthor())
                    .doOnNext(author -> this.messageAuthor = author)
                    .flatMap(author -> guild.getMemberById(author.getId()))
                    .doOnNext(member -> this.messageAuthorAsMember = member)))
            .map(member -> 1));
        return this;
    }
    

    /**
     * Mark that the {@link User} for the bot is required for command execution.
     * This method will collect the:
     * botUser
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public ContextBuilder requireBotUser() {
        requiredMonoList.add(event.getClient().getSelf()
            .doOnNext(user -> this.botUser = user)
            .map(user -> 1));
        return this;
    }

    /**
     * Mark that the {@link User} for the bot is optionally used for command execution.
     * This method will collect the:
     * botUser
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    public ContextBuilder requestBotUser() {
        requestMonoList.add(event.getClient().getSelf()
            .doOnNext(user -> this.botUser = user)
            .map(user -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} for the bot is required for command execution.
     * This method will collect the:
     * botMember
     * guild
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public ContextBuilder requireBotMember() {
        requiredMonoList.add(event.getInteraction().getGuild()
            .doOnNext(guild -> this.guild = guild)
            .flatMap(guild -> guild.getMemberById(event.getClient().getSelfId()))
            .doOnNext(member -> this.botMember = member)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} for the bot is required for command execution.
     * This method will collect the:
     * botMember
     * guild
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public ContextBuilder requestBotMember() {
        requestMonoList.add(event.getInteraction().getGuild()
            .doOnNext(guild -> this.guild = guild)
            .flatMap(guild -> guild.getMemberById(event.getClient().getSelfId()))
            .doOnNext(member -> this.botMember = member)
            .map(member -> 1));
        return this;
    }
}
