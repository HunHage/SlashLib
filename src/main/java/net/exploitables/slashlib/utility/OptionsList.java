package net.exploitables.slashlib.utility;

import discord4j.core.object.command.ApplicationCommandInteraction;
import discord4j.core.object.command.ApplicationCommandInteractionOption;
import discord4j.core.object.command.ApplicationCommandInteractionOptionValue;
import discord4j.core.object.command.ApplicationCommandOption;
import discord4j.core.object.entity.Role;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.Channel;
import discord4j.discordjson.json.ApplicationCommandOptionData;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Optional;

/**
 * A wrapper class for a list of {@link ApplicationCommandInteractionOption}.
 *
 * Since Top level commands have their options contained within an {@link ApplicationCommandInteraction}
 *  but subcommands have their options contained within an {@link ApplicationCommandInteractionOption}.
 *
 * Since access to these needs to be uniform this wrapper class adds functionality to the options list.
 */
public class OptionsList {
    private final List<ApplicationCommandInteractionOption> options;

    public OptionsList(List<ApplicationCommandInteractionOption> options) {
        this.options = options;
    }

    /**
     * @return the list of options this instance wraps around
     */
    public List<ApplicationCommandInteractionOption> getOptions() {
        return this.options;
    }

    /**
     * Get the entry corresponding to the provided option name if it exists.
     *
     * @param name the name of the option to get
     * @return a present optional if an option exists with the provided name
     */
    public Optional<ApplicationCommandInteractionOption> getOption(String name) {
        return this.options.stream().filter(option -> option.getName().equals(name)).findFirst();
    }

    /**
     * Get the value of the option with the specified name, for a String option type.
     *
     * @param name the name of the option to get
     * @return a present {@link String} if an option exists with the provided name *and* has a value
     */
    public Optional<String> getString(String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asString);
    }

    /**
     * Get the value of the option with the specified name, for an integer option type.
     *
     * @param name the name of the option to get
     * @return a present {@link Long} if an option exists with the provided name *and* has a value
     */
    public Optional<Long> getInteger(String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asLong);
    }

    /**
     * Get the value of the option with the specified name, for a Boolean option type.
     *
     * @param name the name of the option to get
     * @return a present {@link Boolean} if an option exists with the provided name *and* has a value
     */
    public Optional<Boolean> getBoolean(String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asBoolean);
    }

    /**
     * Get the value of the option with the specified name, for a User option type.
     *
     * @param name the name of the option to get
     * @return a non empty {@link Mono<User>} if an option exists with the provided name *and* has a value
     */
    public Mono<User> getUser(String name) {
        return Mono.justOrEmpty(getOption(name)
                .flatMap(ApplicationCommandInteractionOption::getValue))
            .flatMap(ApplicationCommandInteractionOptionValue::asUser);
    }

    /**
     * Get the value of the option with the specified name, for a channel option type.
     *
     * @param name the name of the option to get
     * @return a non empty {@link Mono<Channel>} if an option exists with the provided name *and* has a value
     */
    public Mono<Channel> getChannel(String name) {
        return Mono.justOrEmpty(getOption(name)
                .flatMap(ApplicationCommandInteractionOption::getValue))
            .flatMap(ApplicationCommandInteractionOptionValue::asChannel);
    }

    /**
     * Get the value of the option with the specified name, for a Role option type.
     *
     * @param name the name of the option to get
     * @return a non empty {@link Mono<Role>} if an option exists with the provided name *and* has a value
     */
    public Mono<Role> getRole(String name) {
        return Mono.justOrEmpty(getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue))
        .flatMap(ApplicationCommandInteractionOptionValue::asRole);
    }


    /**
     * Get the value of the option with the specified name, for a Number option type.
     *
     * @param name the name of the option to get
     * @return a non empty {@link Optional<Double>} if an option exists with the provided name *and* has a value
     */
    public Optional<Double> getNumber(String name) {
        return getOption(name)
                .flatMap(ApplicationCommandInteractionOption::getValue)
                .map(ApplicationCommandInteractionOptionValue::asDouble);
    }

    /**
     * Compares a list of {@link ApplicationCommandOptionData} and a list of {@link ApplicationCommandInteractionOption}.
     * @param normalOptions List of ApplicationCommandOptionData instances.
     * @param aciOptions List of ApplicationCommandInteractionOption instances.
     * @return true if both lists represent the exact same options (same name, same types and same sub-options (if subcommand)),
     * or if both lists are empty. false otherwise.
     */
    public static boolean compareOptionDataAndAciOptions(List<ApplicationCommandOptionData> normalOptions,
                                                         List<ApplicationCommandInteractionOption> aciOptions) {
        if (normalOptions.size() != aciOptions.size()) return false;
        if (normalOptions.isEmpty()) return true;  // both are empty lists so they're equal
        boolean optionsAreEqual = true;
        ApplicationCommandInteractionOption firstAciOption = aciOptions.get(0);  // for the gateway client
        for (ApplicationCommandOptionData optData : normalOptions) {
            ApplicationCommandOption opt = new ApplicationCommandOption(firstAciOption.getClient(), optData);
            boolean thisOptionIsThere = false;
            for (ApplicationCommandInteractionOption aciOption : aciOptions) {
                if (
                        aciOption.getName().equals(opt.getName())
                                && aciOption.getType().equals(opt.getType())
                                && compareOptionsAndAciOptions(opt.getOptions(), aciOption.getOptions())
                ) {
                    thisOptionIsThere = true;
                    break;
                }
            }
            if (!thisOptionIsThere) {
                optionsAreEqual = false;
                break;
            }
        }
        return optionsAreEqual;
    }

    /**
     * Compares a list of {@link ApplicationCommandOption} and a list of {@link ApplicationCommandInteractionOption}.
     * @param normalOptions List of ApplicationCommandOption instances.
     * @param aciOptions List of ApplicationCommandInteractionOption instances.
     * @return true if both lists represent the exact same options (same name, same types and same sub-options (if subcommand)),
     * or if both lists are empty. false otherwise.
     */
    public static boolean compareOptionsAndAciOptions(List<ApplicationCommandOption> normalOptions,
                                                      List<ApplicationCommandInteractionOption> aciOptions) {
        if (normalOptions.size() != aciOptions.size()) return false;
        if (normalOptions.isEmpty()) return true;  // both are empty lists so they're equal
        boolean optionsAreEqual = true;
        for (ApplicationCommandOption opt : normalOptions) {
            boolean thisOptionIsThere = false;
            for (ApplicationCommandInteractionOption aciOption : aciOptions) {
                if (
                        aciOption.getName().equals(opt.getName())
                                && aciOption.getType().equals(opt.getType())
                                && compareOptionsAndAciOptions(opt.getOptions(), aciOption.getOptions())
                ) {
                    thisOptionIsThere = true;
                    break;
                }
            }
            if (!thisOptionIsThere) {
                optionsAreEqual = false;
                break;
            }
        }
        return optionsAreEqual;
    }
}
