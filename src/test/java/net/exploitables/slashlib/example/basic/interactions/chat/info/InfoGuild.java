package net.exploitables.slashlib.example.basic.interactions.chat.info;

import discord4j.core.spec.EmbedCreateSpec;
import discord4j.core.spec.InteractionApplicationCommandCallbackSpec;
import discord4j.rest.util.Image;
import net.exploitables.slashlib.commands.standard.SubCommand;
import net.exploitables.slashlib.context.ChatInputContext;
import net.exploitables.slashlib.context.ChatInputContextBuilder;
import reactor.core.publisher.Mono;

import java.util.List;

/**
 * An example chat input interaction which belongs to a top or mid level group.
 * This command can be called with `/info guild`
 */
class InfoGuild extends SubCommand {
    /**
     * Create a new instance of this class, we have no options to set for it.
     * But do note, due to how the classes are arranged in the packages this
     *  constructor doesn't need to be public, and neither does the class.
     *  This does not affect things greatly, but it won't make this class
     *  available where it isn't needed.
     */
    InfoGuild() {
        super("guild", "show information about this guild");
    }

    /**
     * For this command we will focus on how to use blocking code.
     * To do this we simply create a mono from the context then *map* to a locally created
     *  non-reactive method.
     *
     * @param context a {@link ChatInputContext} provided by SlashLib with some data provided about the interaction.
     * @return the same context provided
     */
    @Override
    public Mono<ChatInputContext> executeChat(ChatInputContext context) {
        return Mono.just(context).map(this::executeChatBlocking);
    }

    private ChatInputContext executeChatBlocking(ChatInputContext context) {
        EmbedCreateSpec.Builder embed = EmbedCreateSpec.builder();

        embed.title(context.getGuild().getName());
        // There "should" always be a PNG version of an avatar available.
        //noinspection OptionalGetWithoutIsPresent
        embed.thumbnail(context.getGuild().getIconUrl(Image.Format.PNG).get());

        // Let's use a StringBuilder with some blocking calls since we are in a blocking method.
        // A normal string can work too.
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder
            .append("Users: ").append(context.getGuild().getMemberCount())
            .append("\n")
            .append("Channels: ").append(context.getGuild()
                .getChannels()
                .collectList()
                .map(List::size)
                .defaultIfEmpty(-1)
                .block())
            .append("\n")
            .append("Roles: ").append(context.getGuild()
                .getRoles()
                .collectList()
                .map(List::size)
                .defaultIfEmpty(-1)
                .block());
        embed.description(stringBuilder.toString());

        // Reply with our embed
        context.getEvent()
            .reply(InteractionApplicationCommandCallbackSpec.builder()
                .addEmbed(embed.build())
                .build())
            .block();

        return context;
    }

    /**
     * Set the required data needed to execute this interaction. The default event receiver
     *  will handle sending an error message if the required data can't be retrieved.
     *
     * @param contextBuilder the context builder that will be used to create the interaction context.
     * @return the context builder modified
     */
    @Override
    public ChatInputContextBuilder setRequestData(ChatInputContextBuilder contextBuilder) {
        return contextBuilder.requireGuild();
    }
}
