package net.exploitables.slashlib.commands.message;

import discord4j.core.spec.EmbedCreateSpec;
import discord4j.core.spec.InteractionApplicationCommandCallbackSpec;
import net.exploitables.slashlib.commands.MessageCommand;
import net.exploitables.slashlib.context.MessageContext;
import net.exploitables.slashlib.context.MessageContextBuilder;
import reactor.core.publisher.Mono;

import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;

/**
 * Demo command to return an embed with various information about the entities provided
 *  with the user commands.
 *
 * This Demo is designed to work in DMs, however it is NOT the proper way to do so.
 * This Demo takes up an entire second command slot where the logic could be shared with a few "if" statements.
 */
public class MessageInfoInDMs extends MessageCommand {
    private static final DateTimeFormatter formatter = DateTimeFormatter
            .ofLocalizedDateTime(FormatStyle.SHORT).withZone(ZoneId.of("UTC"));

    public MessageInfoInDMs() {
        super("Info in DMs");
        setUsableInDMs(); // Set that this command can be used in DMs, this overrides permission requirements.
    }

    @Override
    public Mono<MessageContext> executeMessage(MessageContext context) {
        EmbedCreateSpec.Builder embed = EmbedCreateSpec.builder();
        embed.title("Info - User Context Command in DMs");
        embed.description("Displaying various collected information.");

        embed.addField("Channel",
            "```" +
            "      ID: " + context.getMessageChannel().getId().asString() + "\n" +
            " Created: " + formatter.format(context.getMessageChannel().getId().getTimestamp()) +
            "```",
            true);

        // Just to make the output look pretty
        embed.addField("Current Time",
            "```" +
            formatter.format(Instant.now()) +
            "```",
            false);

        String content = context.getTargetMessage().getContent();
        if (content.length() > 50) { content = content.substring(0, 17) + "..."; }
        embed.addField("Message",
            "```" +
            "      ID: " + context.getTargetMessage().getId().asString() + "\n" +
            " Content: " + content + "\n" +
            "  Posted: " + formatter.format(context.getTargetMessage().getId().getTimestamp()) +
            "```",
            false);

        embed.addField("Calling User",
            "```" +
            "      ID: " + context.getUser().getId().asString() + "\n" +
            "    Name: " + context.getUser().getUsername() + "#" + context.getUser().getDiscriminator() + "\n" +
            " Created: " + formatter.format(context.getUser().getId().getTimestamp()) +
            "```",
            true);

        embed.addField("Message Author",
            "```" +
            "      ID: " + context.getMessageAuthor().getId().asString() + "\n" +
            "    Name: " + context.getMessageAuthor().getUsername() + "#" + context.getUser().getDiscriminator() + "\n" +
            " Created: " + formatter.format(context.getMessageAuthor().getId().getTimestamp()) +
            "```",
            true);

        return context.getEvent()
            .reply(InteractionApplicationCommandCallbackSpec.builder().addEmbed(embed.build()).build())
            .thenReturn(context);
    }

    @Override
    public MessageContextBuilder setRequestData(MessageContextBuilder builder) {
        // You DO NOT need to call everything like this, some of these methods imply others and calling
        //  all of them is redundant. ex: requireTargetMember also gets the target user.
        // This is done as a form of test. Methods that fetch guild related data are not included.
        return builder
            .requireMessageChannel()
            .requireMessage()
            .requireMessageAuthor();
    }
}
