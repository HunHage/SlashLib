package net.exploitables.slashlib;

import discord4j.core.object.command.ApplicationCommandInteraction;
import discord4j.core.object.command.ApplicationCommandInteractionOption;
import net.exploitables.slashlib.commands.*;
import net.exploitables.slashlib.utility.CommandOptionPair;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * A representation of the command structure used for slash commands.
 *
 * Some notes on my (HunHage) observations about slash commands
 * - Each "path" in the command tree must lead to a command.
 * -- This means if /command sub_command is a command then /command is not a callable command.
 * -- Same goes for /command group_command sub_command for command and group_command.
 * - The "name" of any type of command is just the name of that command.
 * -- /command group_command sub_command each have their own names and don't contain each other.
 * -- Discord seems to only navigate down, not up. See the next note section about options.
 * - The Group and Sub commands are options of the above command.
 * -- Knowing about the "path" and "name" means that if a command is not callable then it will
 *     have one option of type GROUP_COMMAND or SUB_COMMAND. We can assume that if there is 0 options,
 *     1 option that is not group/sub, or 2+ options of any type then the command is callable. This is key.
 *
 * With the above observations a tree is the optimal choice for organizing slash commands by name.
 * That is what this class exists to do.
 *
 * Where Discord slash commands exist as:
 * Root
 * - Command
 * - Command
 * -- SubCommand
 * -- SubCommand
 * -- GroupCommand
 * --- SubCommand
 *
 * The Tree will use classes as:
 * CommandStructure
 * - TopCommand
 * - TopGroupCommand
 * -- SubCommand
 * -- SubCommand
 * -- MidGroupCommand
 * --- SubCommand
 *
 * Commands need no knowledge of their parent or involvement in the tree.
 * Since only Commands and SubCommands are callable, GroupCommands are used for each uncallable command.
 *
 * User and Message context menu "commands" are kept in their own hashmap to avoid name collisions but are assembled
 *  as TopCommands when creating request data.
 */
public class CommandStructure {
    private final Map<String, ChatCommand> chatCommands;
    private final Map<String, UserCommand> userCommands;
    //private final Map<String, ChatCommand> messageCommands;

    /**
     * Create the Command Structure used for Slash Commands
     */
    public CommandStructure() {
        chatCommands = new HashMap<>();
        userCommands = new HashMap<>();
    }

    /**
     * Get the Command called with a slash command.
     * Since Discord only allows callable commands to be called, we will have a command to return.
     *
     * @param aci the ApplicationCommandInteraction for a Slash Command
     * @return the Command being called
     */
    public CommandOptionPair searchForChatCommand(ApplicationCommandInteraction aci) {
        Objects.requireNonNull(aci.getName().orElse(null), "ApplicationCommandInteraction name missing!");
        ChatCommand command = this.chatCommands.get(aci.getName().get());
        List<ApplicationCommandInteractionOption> options = aci.getOptions();
        // If there is only one option and it's a SubCommand or SubCommandGroup option then search for it
        if (options.size() == 1 && options.get(0).getType().getValue() < 3) {
            return searchForChatCommand(command, options);
        } else {
            return new CommandOptionPair(command, options);
        }
    }

    /**
     * Search for a second or third level command recursively
     * @param command the command to check and search
     * @param options the options for this command
     * @return a callable command
     */
    private CommandOptionPair searchForChatCommand(ChatCommand command, List<ApplicationCommandInteractionOption> options) {
        // If there is only one option and it's a SubCommand or SubCommandGroup option then search for it
        if (options.size() == 1 && options.get(0).getType().getValue() < 3) {
            ApplicationCommandInteractionOption option = options.get(0);
            return searchForChatCommand(command.getSubCommand(option.getName()), option.getOptions());
        } else {
            return new CommandOptionPair(command, options);
        }
    }

    /**
     * Add a command to this group, can be a TopCommand or TopGroupCommand
     *
     * @param command the sub command to add to this group
     */
    public void addChatCommand(ChatCommand command) {
        if (!(command instanceof TopCommand || command instanceof TopGroupCommand)) {
            throw new InvalidCommandLocationException(command, "TopCommand or TopGroupCommand");
        }
        chatCommands.put(command.getName(), command);
    }

    /**
     * Add a user command to this structure.
     *
     * @param command the user context command to add
     */
    public void addUserCommand(UserCommand command) {
        userCommands.put(command.getName(), command);
    }

    public Map<String, ChatCommand> getChatCommands() { return this.chatCommands; }
    public Map<String, UserCommand> getUserCommands() { return this.userCommands; }
}
