package net.exploitables.slashlib;

import discord4j.core.GatewayDiscordClient;
import discord4j.core.event.EventDispatcher;
import discord4j.core.event.domain.interaction.SlashCommandEvent;

public class SlashLib {
    private static SlashLib singleton = null;

    private CommandRegister commandRegister;
    private SlashCommandEventReceiver receiver;

    private SlashLib() {
        this.commandRegister = null;
        this.receiver = null;
    }

    /**
     * A rough edge, it is presumed that the singleton will be created before this is called.
     * @return the instance of SlashLib
     */
    public static SlashLib get() {
        return singleton;
    }

    /**
     * Create an instance of SlashLib from a builder using defaults if not present. This will do some
     * verification on the commands provided and assert they are the proper classes.
     * @param builder the {@link net.exploitables.slashlib.context.SlashCommandContextBuilder} with custom values
     * @return a new instance of SlashLib which can be used to process commands
     */
    static SlashLib create(SlashLibBuilder builder) {
        if (singleton != null) {
            throw new IllegalStateException("SlashLib already created!");
        }
        SlashLib slashLib = new SlashLib();
        if (builder.receiver == null) {
            slashLib.receiver = new SlashCommandEventReceiverImpl();
        } else {
            slashLib.receiver = builder.receiver;
        }
        slashLib.commandRegister = CommandRegister.create(builder.commands);
        singleton = slashLib;
        return singleton;
    }

    /**
     * Register this instance with an {@link EventDispatcher} to handle {@link SlashCommandEvent}s
     * @param eventDispatcher the {@link EventDispatcher} to be used with the bots future {@link GatewayDiscordClient}
     */
    public void registerAsListener(EventDispatcher eventDispatcher) {
        eventDispatcher.on(SlashCommandEvent.class, receiver::receiveSlashCommandEvent).subscribe();
    }

    /**
     * @return the {@link CommandRegister} used by this instance
     */
    public CommandRegister getCommandRegister() { return commandRegister; }
}
