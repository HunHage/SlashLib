package net.exploitables.slashlib.context;

import discord4j.core.event.domain.interaction.MessageInteractionEvent;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.Message;
import discord4j.core.object.entity.User;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * A builder class provided to user commands before the command logic is called.
 */
public class MessageContextBuilder extends ContextBuilder {
    protected final @NonNull MessageInteractionEvent event;

    Message targetMessage;
    User messageAuthor;
    Member messageAuthorAsMember;

    public MessageContextBuilder(@NonNull MessageInteractionEvent event) {
        super(event);

        this.event                  = event;

        this.targetMessage          = null;
        this.messageAuthor          = null;
        this.messageAuthorAsMember  = null;
    }

    @Override
    public MessageContext build() {
        return new MessageContext(this);
    }

    /**
     * Mark that the {@link Message} the command was called on is required for command execution.
     * This method will collect the:
     * message
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageContextBuilder requireMessage() {
        requiredMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Message} the command was called on is optionally used for command execution.
     * This method will collect the
     * message
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    public MessageContextBuilder requestMessage() {
        requestMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} who authored the message this command
     *  was called on is required for command execution.
     * This method will collect the:
     * message
     * messageAuthor
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageContextBuilder requireMessageAuthor() {
        requiredMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .flatMap(message -> Mono.justOrEmpty(message.getAuthor()))
            .doOnNext(user -> this.messageAuthor = user)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} who authored the message this command
     *  was called on is optionally used for command execution.
     * This method will collect the:
     * message
     * messageAuthor
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    public MessageContextBuilder requestMessageAuthor() {
        requestMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .flatMap(message -> Mono.justOrEmpty(message.getAuthor()))
            .doOnNext(user -> this.messageAuthor = user)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} who authored the message this command
     *  was called on is required for command execution.
     * This method will collect the:
     * guild
     * message
     * messageAuthor
     * messageAuthorAsMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageContextBuilder requireMessageAuthorAsMember() {
        // As of D4J v3.2.0 message#getAuthorAsMember() will get the guild
        requiredMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .flatMap(message -> message.getGuild()
                .doOnNext(guild -> this.guild = guild)
                .flatMap(guild -> Mono.justOrEmpty(message.getAuthor())
                    .doOnNext(author -> this.messageAuthor = author)
                    .flatMap(author -> guild.getMemberById(author.getId()))
                    .doOnNext(member -> this.messageAuthorAsMember = member)))
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} who authored the message this command
     *  was called on is optionally used for command execution.
     * This method will collect the:
     * guild
     * message
     * messageAuthor
     * messageAuthorAsMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public MessageContextBuilder requestMessageAuthorAsMember() {
        // As of D4J v3.2.0 message#getAuthorAsMember() will get the guild
        requestMonoList.add(event.getTargetMessage()
            .doOnNext(message -> this.targetMessage = message)
            .flatMap(message -> message.getGuild()
                .doOnNext(guild -> this.guild = guild)
                .flatMap(guild -> Mono.justOrEmpty(message.getAuthor())
                    .doOnNext(author -> this.messageAuthor = author)
                    .flatMap(author -> guild.getMemberById(author.getId()))
                    .doOnNext(member -> this.messageAuthorAsMember = member)))
            .map(member -> 1));
        return this;
    }
}
