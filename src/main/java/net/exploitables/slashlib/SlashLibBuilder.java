package net.exploitables.slashlib;

import discord4j.core.event.domain.interaction.ChatInputInteractionEvent;
import net.exploitables.slashlib.commands.*;

import java.util.ArrayList;
import java.util.List;

/**
 * A builder for {@link SlashLib} to customize the components of it.
 */
public class SlashLibBuilder {
    EventReceiver receiver;
    List<ChatCommand> chatCommands;
    List<UserCommand> userCommands;
    List<MessageCommand> messageCommands;

    public SlashLibBuilder() {
        this.receiver = null;
        this.chatCommands = new ArrayList<>();
        this.userCommands = new ArrayList<>();
        this.messageCommands = new ArrayList<>();
    }

    /**
     * Add a chat input command to be registered when building a new {@link SlashLib}.
     * An assertion is done to verify the command is an instance of {@link TopCommand} or {@link GroupCommand}
     *
     * @param command the command to add to the {@link CommandRegister}
     * @return this instance
     */
    public SlashLibBuilder addChatCommand(ChatCommand command) {
        if (!(command instanceof TopCommand || command instanceof TopGroupCommand)) {
            throw new InvalidCommandLocationException(command);
        }
        chatCommands.add(command);
        return this;
    }

    /**
     * Add a user command to be registered when building a new {@link SlashLib}.
     *
     * @param command the command to add to the {@link CommandRegister}
     * @return this instance
     */
    public SlashLibBuilder addUserCommand(UserCommand command) {
        userCommands.add(command);
        return this;
    }

    /**
     * Add a message command to be registered when building a new {@link SlashLib}.
     *
     * @param command the command to add to the {@link CommandRegister}
     * @return this instance
     */
    public SlashLibBuilder addMessageCommand(MessageCommand command) {
        messageCommands.add(command);
        return this;
    }

    /**
     * Set the method of receiving {@link ChatInputInteractionEvent}s
     * @param receiver the method which will receive {@link ChatInputInteractionEvent}s to process
     * @return this instance
     */
    public SlashLibBuilder setReceiver(EventReceiver receiver) {
         this.receiver = receiver;
         return this;
    }

    /**
     * Create a new {@link SlashLib} with the set values overriding the defaults.
     * @return a created {@link SlashLib} instance from this builder
     */
    public SlashLib build() {
        return SlashLib.create(this);
    }
}
