package net.exploitables.slashlib.examples;

import discord4j.core.DiscordClient;
import discord4j.core.GatewayDiscordClient;
import discord4j.core.event.EventDispatcher;
import discord4j.core.event.domain.guild.GuildCreateEvent;
import discord4j.discordjson.json.ApplicationCommandPermissionsData;
import discord4j.discordjson.json.ApplicationCommandPermissionsRequest;
import net.exploitables.slashlib.SlashLib;
import net.exploitables.slashlib.SlashLibBuilder;
import net.exploitables.slashlib.commands.EchoCommand;
import net.exploitables.slashlib.commands.ModPermNeeded;
import net.exploitables.slashlib.commands.PingCommand;
import net.exploitables.slashlib.commands.owner.OwnerTopCommand;
import net.exploitables.slashlib.commands.owner.SetModRole;
import reactor.core.publisher.Mono;
import reactor.util.Logger;
import reactor.util.Loggers;

import java.time.Duration;
import java.util.Objects;

public class ExamplePermissionUsage {
    private static final Logger logger = Loggers.getLogger(ExamplePermissionUsage.class);

    private static DiscordClient discordClient;
    private static SlashLib slashLib;
    private static GatewayDiscordClient discordGateway;
    private static long applicationId;

    public static void main(String[] args) {
        // Setup Discord4J
        discordClient = DiscordClient.create(args[0]);
        EventDispatcher dispatcher = EventDispatcher.builder().build();

        // Setup listener for GuildCreateEvent
        dispatcher.on(GuildCreateEvent.class)
            .flatMap(ExamplePermissionUsage::setGuildCommandOwnerPermissions)
            .onErrorResume(t -> {
                t.printStackTrace();
                return Mono.empty();
            })
            .subscribe();

        // Setup Commands and SlashLib
        SlashLibBuilder slashLibBuilder = new SlashLibBuilder();
        slashLibBuilder.addChatCommand(new PingCommand());
        slashLibBuilder.addChatCommand(new EchoCommand());
        slashLibBuilder.addChatCommand(new SetModRole());
        slashLibBuilder.addChatCommand(new ModPermNeeded());
        slashLib = slashLibBuilder.build();
        slashLib.registerAsListener(dispatcher);

        // Login to discord
        discordGateway = discordClient.gateway()
            .setEventDispatcher(dispatcher)
            .login()
            .block();

        // Register Slash Commands
        Long nullableApplicationId = discordClient.getApplicationId().block();
        Objects.requireNonNull(nullableApplicationId);
        applicationId = nullableApplicationId;
        slashLib.getCommandRegister().registerSlashCommands(discordClient.getApplicationService(), applicationId);

        // Block until disconnect
        discordGateway.onDisconnect().block();
    }

    /**
     * Set the owner commands to allow the owner of a guild to use them when a guild is joined or connected.
     * @param event the GuildCreateEvent as produced by D4J
     * @return an empty mono
     */
    private static Mono<Void> setGuildCommandOwnerPermissions(GuildCreateEvent event) {
        // Get commands
        return Mono.just(1)
            // Wait 5 seconds for global commands to update
            // If only we could just set a permission to have instead of a role/user ...
            .delayElement(Duration.ofSeconds(5))
            // Get the global commands
            .flatMapMany(_i -> discordClient.getApplicationService().getGlobalApplicationCommands(applicationId))
            // Filter out non-owner commands
            .filter(acd -> slashLib.getCommandRegister().getCommandStructure().getChatCommands().get(acd.name()) instanceof OwnerTopCommand)
            // Set the permission to only allow the owner to use them
            .doOnNext(acd -> logger.info("Setting command permission to owner for: " + acd.name()))
            .flatMap(acd -> discordClient.getApplicationService().modifyApplicationCommandPermissions(
                applicationId,
                event.getGuild().getId().asLong(),
                Long.parseLong(acd.id()),
                ApplicationCommandPermissionsRequest.builder()
                    .addPermission(ApplicationCommandPermissionsData.builder()
                        .type(2) // ROLE is 1, USER is 2
                        .id(event.getGuild().getOwnerId().asLong())
                        .permission(true)
                        .build())
                    .build()))
            .then();
    }

    public static DiscordClient getDiscordClient()          { return discordClient; }
    public static SlashLib getSlashLib()                    { return slashLib; }
    public static GatewayDiscordClient getDiscordGateway()  { return discordGateway; }
    public static long getApplicationId()                   { return applicationId; }
}
