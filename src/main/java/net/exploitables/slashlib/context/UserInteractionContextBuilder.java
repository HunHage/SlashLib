package net.exploitables.slashlib.context;

import discord4j.core.event.domain.interaction.UserInteractionEvent;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.object.entity.channel.TopLevelGuildChannel;
import reactor.core.publisher.Mono;

/**
 * A builder class provided to user commands before the command logic is called.
 */
public class UserInteractionContextBuilder extends ContextBuilder {
    final UserInteractionEvent event;

    User targetUser;
    Member targetMember;

    public UserInteractionContextBuilder(UserInteractionEvent event) {
        super(event.getInteraction().getUser());

        this.event = event;

        this.targetUser = null;
        this.targetMember = null;
    }

    @Override
    public UserInteractionContext build() {
        return new UserInteractionContext(this);
    }

    /**
     * Mark that the guild is required for command execution.
     * This method will collect the:
     * guild
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public UserInteractionContextBuilder requireGuild() {
        requiredMonoList.add(event.getInteraction().getGuild()
            .doOnNext(guild -> this.guild = guild)
            .map(guild -> 1));
        return this;
    }

    /**
     * Mark that the {@link MessageChannel} the command was called in is required for command execution.
     * This method will collect the:
     * messageChannel
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public UserInteractionContextBuilder requireMessageChannel() {
        requiredMonoList.add(event.getInteraction().getChannel()
            .doOnNext(channel -> this.messageChannel = channel)
            .map(channel -> 1));
        return this;
    }

    /**
     * Mark that the {@link GuildChannel} the command was called in is required for command execution.
     * This method will collect the:
     * messageChannel
     * guildChannel
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public UserInteractionContextBuilder requireTopLevelGuildChannel() {
        requiredMonoList.add(event.getInteraction().getChannel()
            .doOnNext(channel -> this.messageChannel = channel)
            .ofType(TopLevelGuildChannel.class)
            .doOnNext(channel -> this.topLevelGuildChannel = channel)
            .map(channel -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} the command was called by is required for command execution.
     * This method will collect the:
     * callingUserAsMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public UserInteractionContextBuilder requireMember() {
        requiredMonoList.add(Mono.justOrEmpty(event.getInteraction().getMember())
            .doOnNext(member -> this.member = member)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link User} the interaction is called on.
     * This method will collect the:
     * targetUser
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public UserInteractionContextBuilder requireTargetUser() {
        requiredMonoList.add(event.getTargetUser()
            .doOnNext(user -> this.targetUser = user)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} the interaction is called on.
     * This method will collect the:
     * guild
     * targetUser
     * targetMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public UserInteractionContextBuilder requireTargetMember() {
        requiredMonoList.add(event.getTargetUser()
            .doOnNext(user -> this.targetUser = user)
            .flatMap(user -> event.getInteraction().getGuild()
                .doOnNext(guild -> this.guild = guild)
                .flatMap(guild -> guild.getMemberById(user.getId()))
                .doOnNext(member -> this.targetMember = member))
            .map(member -> 1));
        return this;
    }

    public UserInteractionEvent getEvent() { return event; }
}
