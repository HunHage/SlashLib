package net.exploitables.slashlib.context;

import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.object.entity.channel.TopLevelGuildChannel;
import reactor.util.annotation.NonNull;

/**
 * Superclass for context provided during user logic part of interaction lifecycle.
 */
public abstract class Context {
    protected final Guild guild;
    protected final MessageChannel messageChannel;
    protected final TopLevelGuildChannel topLevelGuildChannel;
    protected final @NonNull User user;
    protected final Member member;

    Context(ContextBuilder builder) {
        this.guild = builder.guild;
        this.messageChannel = builder.messageChannel;
        this.topLevelGuildChannel = builder.topLevelGuildChannel;
        this.user = builder.user;
        this.member = builder.member;
    }

    /**
     * @return The {@link Guild} this interaction was called in.
     *         If required by the context builder, else null.
     */
    public final Guild getGuild() { return guild; }

    /**
     * @return The {@link MessageChannel} this interaction was called in.
     *         If required by the context builder, else null.
     */
    public final MessageChannel getMessageChannel() { return messageChannel; }

    /**
     * @return The {@link TopLevelGuildChannel} this interaction was called in.
     *         If required by the context builder, else null.
     */
    public final TopLevelGuildChannel getTopLevelGuildChannel() { return topLevelGuildChannel; }

    /**
     * @return The {@link User} who called this interaction.
     *         Always present, provided by the event.
     */
    @NonNull
    public final User getUser() { return user; }

    /**
     * @return The {@link Member} for the {@link Context#user} who called this interaction.
     *         If required by the context builder, else null.
     */
    public final Member getMember() { return member; }
}
