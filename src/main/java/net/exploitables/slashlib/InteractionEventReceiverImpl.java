package net.exploitables.slashlib;


import discord4j.core.event.domain.interaction.*;
import discord4j.common.util.Snowflake;
import discord4j.core.object.entity.channel.GuildChannel;
import net.exploitables.slashlib.commands.BaseCommand;
import net.exploitables.slashlib.context.*;
import reactor.core.publisher.Mono;

public class InteractionEventReceiverImpl implements InteractionEventReceiver {
    private <E extends DeferrableInteractionEvent, B extends BaseCommand> Mono<Boolean> checkPermissions(E event, B baseCommand) {
        Mono<GuildChannel> gcMono = event.getInteraction()   // mono for getting the guild channel where the
            .getChannel()                                    // interaction occurred
            .ofType(GuildChannel.class);

        Mono<Boolean> botPermsMono = gcMono                 // mono for checking if the bot has perms for this cmd
                .flatMap(gc -> gc.getEffectivePermissions(event.getClient().getSelfId()))
                .map(perms -> perms.containsAll(baseCommand.getBotDiscordPermissions()))
                .defaultIfEmpty(false);

        Mono<Boolean> userPermsMono = gcMono                // mono for checking if the user has perms for this cmd
                .flatMap(gc -> gc.getEffectivePermissions(event.getInteraction().getUser().getId()))
                .map(perms -> perms.containsAll(baseCommand.getUserDiscordPermissions()))
                .defaultIfEmpty(false);

        return botPermsMono.zipWith(userPermsMono)         // check both simultaneously to produce error messages
                .flatMap(havePermsTuple -> Mono.defer(() -> {
                    String content;
                    boolean botHasPerms = havePermsTuple.getT1();
                    boolean userHasDiscordPerms = havePermsTuple.getT2();
                    boolean condition = (botHasPerms && userHasDiscordPerms) || baseCommand.isUsableInDMs();
                    if (!condition) {  // No perms and not usable in DMs, send silent error message
                        if (
                                !baseCommand.getBotDiscordPermissions().isEmpty()
                                || !baseCommand.getUserDiscordPermissions().isEmpty()
                        ) {
                            if (!botHasPerms) {
                                content = "I need the following permissions for that command: " +
                                        baseCommand.getBotDiscordPermissions().asEnumSet();
                            } else {
                                content = "You need to have the following permissions to use that command: " +
                                        baseCommand.getUserDiscordPermissions().asEnumSet();
                            }
                        } else {
                            content = "That is not usable in DMs.";
                        }
                        // .then(Mono.empty()) for type compatibility
                        return event.reply(content).withEphemeral(true).then(Mono.empty());
                    } else {
                        return Mono.just(true);
                    }
                }));
    }

    @Override
    public Mono<ChatInputInteractionContext> receiveChatInputInteractionEvent(ChatInputInteractionEvent event) {
        // guild ID so we can search for guild-only commands; null if in DMs => no guild-only cmds to search for.
        Long guildID = event.getInteraction().getGuildId().map(Snowflake::asLong).orElse(null);

        // We need the command interaction to get the options
        return Mono.justOrEmpty(event.getInteraction().getCommandInteraction())
            // Get the command, we use the helper method on the command Structure to get this as
            //  chat input commands care multi-level
            .flatMap(aci -> Mono.just(SlashLib.get().getCommandRegister().getCommandStructure().searchForChatCommand(aci, guildID))
                .filter(pair -> pair.getKey() != null)  // Make sure the command is known to us (avoid NullPointerException)
                // Check bot and user permissions in guild
                .flatMap(pair -> checkPermissions(event, pair.getKey())
                    // Have perms, create the builder and collect data
                    .flatMap(_bool -> pair.getKey().setRequestData(new ChatInputInteractionContextBuilder(event, aci, pair.getValue()))
                        .collectData()
                        .ofType(ChatInputInteractionContextBuilder.class)
                        .map(ChatInputInteractionContextBuilder::build)
                        // Call the command
                        .flatMap(context -> pair.getKey().executeChat(context)))));
    }

    @Override
    public Mono<UserInteractionContext> receiveUserInteractionEvent(UserInteractionEvent event) {
        // guild ID so we can search for guild-only commands; null if in DMs => no guild-only cmds to search for.
        Long guildID = event.getInteraction().getGuildId().map(Snowflake::asLong).orElse(null);

        // Use helper method to search for user commands to differentiate between global and guild-only commands
        return Mono.justOrEmpty(event.getInteraction().getCommandInteraction())
            .flatMap(aci -> Mono.justOrEmpty(SlashLib.get().getCommandRegister().getCommandStructure().searchForUserCommand(aci, guildID)))
            // Check bot and user permissions in guild
            .flatMap(userCommand -> checkPermissions(event, userCommand)
                // Have perms, create the builder and collect data
                .flatMap(_bool -> userCommand.setRequestData(new UserInteractionContextBuilder(event))
                    .collectData()
                    .ofType(UserInteractionContextBuilder.class)
                    .map(UserInteractionContextBuilder::build)
                    // Call the command
                    .flatMap(userCommand::executeUser)));
    }

    @Override
    public Mono<MessageInteractionContext> receiveMessageInteractionEvent(MessageInteractionEvent event) {
        // guild ID so we can search for guild-only commands; null if in DMs => no guild-only cmds to search for.
        Long guildID = event.getInteraction().getGuildId().map(Snowflake::asLong).orElse(null);
        // Use helper method to search for message commands to differentiate between global and guild-only commands
        return Mono.justOrEmpty(event.getInteraction().getCommandInteraction())
            .flatMap(aci -> Mono.justOrEmpty(SlashLib.get().getCommandRegister().getCommandStructure().searchForMessageCommand(aci, guildID)))
            // Check bot and user permissions in guild
            .flatMap(messageCommand -> checkPermissions(event, messageCommand)
                // Have perms, create the builder and collect data
                .flatMap(_bool -> messageCommand.setRequestData(new MessageInteractionContextBuilder(event))
                    .collectData()
                    .ofType(MessageInteractionContextBuilder.class)
                    .map(MessageInteractionContextBuilder::build)
                    // Call the command
                    .flatMap(messageCommand::executeMessage)));
    }
}
