package net.exploitables.slashlib.utility;

import discord4j.core.object.command.ApplicationCommandOption;
import discord4j.discordjson.json.ApplicationCommandOptionData;
import discord4j.discordjson.json.ImmutableApplicationCommandOptionData;

/**
 * A utility class to build {@link ApplicationCommandOptionData} for commands in an appropriate
 *  fashion to be used with the {@link net.exploitables.slashlib.CommandRegister} updating process.
 *
 * The most notorious "gotcha" as of D4J 3.2.0 SNAPSHOT (2021-08-27) is that required must be empty
 *  to be considered as false.
 */
public class OptionBuilder {
    private static ImmutableApplicationCommandOptionData.Builder buildOption(String name, String description, int type) {
        return ApplicationCommandOptionData.builder()
            .name(name)
            .description(description)
            .type(type);
    }

    /**
     * Create an optional string option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData optionalString(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.STRING.getValue())
            .build();
    }

    /**
     * Create a required string option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData requiredString(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.STRING.getValue())
            .required(true)
            .build();
    }

    /**
     * Create an optional integer option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData optionalInteger(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.INTEGER.getValue())
            .build();
    }

    /**
     * Create a required integer option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData requiredInteger(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.INTEGER.getValue())
            .required(true)
            .build();
    }

    /**
     * Create an optional boolean option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData optionalBoolean(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.BOOLEAN.getValue())
            .build();
    }

    /**
     * Create a required boolean option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData requiredBoolean(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.BOOLEAN.getValue())
            .required(true)
            .build();
    }

    /**
     * Create an optional user option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData optionalUser(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.USER.getValue())
            .build();
    }

    /**
     * Create a required user option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData requiredUser(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.USER.getValue())
            .required(true)
            .build();
    }

    /**
     * Create an optional channel option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData optionalChannel(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.CHANNEL.getValue())
            .build();
    }

    /**
     * Create a required channel option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData requiredChannel(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.CHANNEL.getValue())
            .required(true)
            .build();
    }

    /**
     * Create an optional role option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData optionalRole(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.ROLE.getValue())
            .build();
    }

    /**
     * Create a required role option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData requiredRole(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.ROLE.getValue())
            .required(true)
            .build();
    }

    /**
     * Create an optional mentionable option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData optionalMentionable(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.MENTIONABLE.getValue())
            .build();
    }

    /**
     * Create a required mentionable option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData requiredMentionable(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.MENTIONABLE.getValue())
            .required(true)
            .build();
    }

    /**
     * Create an optional number option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData optionalNumber(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.NUMBER.getValue())
            .build();
    }

    /**
     * Create a required number option.
     *
     * @param name name of the option
     * @param description description of the option
     * @return a built {@link ApplicationCommandOptionData} which can be added to the options of a command
     */
    public static ApplicationCommandOptionData requiredNumber(String name, String description) {
        return buildOption(name, description, ApplicationCommandOption.Type.NUMBER.getValue())
            .required(true)
            .build();
    }
}
