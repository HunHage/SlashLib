package net.exploitables.slashlib.context;

import discord4j.core.event.domain.interaction.UserInteractionEvent;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.User;
import reactor.util.annotation.NonNull;
import reactor.util.annotation.Nullable;

/**
 * A builder class provided to user commands before the command logic is called.
 */
public class UserContextBuilder extends ContextBuilder {
    protected final @NonNull UserInteractionEvent event;

    @Nullable User targetUser;
    @Nullable Member targetMember;

    public UserContextBuilder(@NonNull UserInteractionEvent event) {
        super(event);

        this.event          = event;

        this.targetUser     = null;
        this.targetMember   = null;
    }

    @Override
    public UserContext build() {
        return new UserContext(this);
    }

    /**
     * Mark that the {@link User} the interaction is called on is required for command execution.
     * This method will collect the:
     * targetUser
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public UserContextBuilder requireTargetUser() {
        requiredMonoList.add(event.getTargetUser()
            .doOnNext(user -> this.targetUser = user)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link User} the interaction is called on is optionally used for command execution.
     * This method will collect the:
     * targetUser
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    public UserContextBuilder requestTargetUser() {
        requestMonoList.add(event.getTargetUser()
            .doOnNext(user -> this.targetUser = user)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} the interaction is called on is required for command execution.
     * This method will collect the:
     * guild
     * targetUser
     * targetMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    public UserContextBuilder requireTargetMember() {
        requiredMonoList.add(event.getTargetUser()
            .doOnNext(user -> this.targetUser = user)
            .flatMap(user -> event.getInteraction().getGuild()
                .doOnNext(guild -> this.guild = guild)
                .flatMap(guild -> guild.getMemberById(user.getId()))
                .doOnNext(member -> this.targetMember = member))
            .map(member -> 1));
        return this;
    }
    
    /**
     * Mark that the {@link Member} the interaction is called on is optionally used for command execution.
     * This method will collect the:
     * guild
     * targetUser
     * targetMember
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    public UserContextBuilder requestTargetMember() {
        requestMonoList.add(event.getTargetUser()
            .doOnNext(user -> this.targetUser = user)
            .flatMap(user -> event.getInteraction().getGuild()
                .doOnNext(guild -> this.guild = guild)
                .flatMap(guild -> guild.getMemberById(user.getId()))
                .doOnNext(member -> this.targetMember = member))
            .map(member -> 1));
        return this;
    }
}
