package net.exploitables.slashlib.commands.user;

import discord4j.core.spec.EmbedCreateSpec;
import discord4j.core.spec.InteractionApplicationCommandCallbackSpec;
import net.exploitables.slashlib.commands.UserCommand;
import net.exploitables.slashlib.context.UserInteractionContext;
import net.exploitables.slashlib.context.UserInteractionContextBuilder;
import reactor.core.publisher.Mono;

import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Demo command to return an embed with various information about the entities provided
 *  with the user commands.
 */
public class UserInfo extends UserCommand {
    public UserInfo() {
        super("Info");
    }

    @Override
    public Mono<UserInteractionContext> executeUser(UserInteractionContext context) {
        EmbedCreateSpec.Builder embed = EmbedCreateSpec.builder();
        embed.title("Info - User Context Command");
        embed.description("Displaying various collected information.");

        embed.addField("Guild",
            "`      ID:` " + context.getGuild().getId().asString() + "\n" +
            "`    Name:` " + context.getGuild().getName() + "\n" +
            "` Members:` " + context.getGuild().getMemberCount(),
            true);

        embed.addField("Channel",
            "`      ID:` " + context.getMessageChannel().getId().asString() + "\n" +
            "`    Name:` " + context.getGuildChannel().getName() + "\n" +
            "`Position:` " + context.getGuildChannel().getPosition(),
            true);

        embed.addField("Calling User",
            "`      ID:` " + context.getCallingUser().getId().asString() + "\n" +
            "`    Name:` " + context.getCallingUser().getUsername() + "#" + context.getCallingUser().getDiscriminator() + "\n" +
            "`  Joined:` " + DateTimeFormatter.ISO_DATE_TIME.format(context.getCallingMember().getJoinTime().orElse(Instant.ofEpochMilli(0))),
            true);

        embed.addField("Target User",
            "`      ID:` " + context.getTargetUser().getId().asString() + "\n" +
            "`    Name:` " + context.getTargetUser().getUsername() + "#" + context.getCallingUser().getDiscriminator() + "\n" +
            "`  Joined:` " + DateTimeFormatter.ISO_DATE_TIME.format(context.getTargetMember().getJoinTime().orElse(Instant.ofEpochMilli(0))),
            true);

        return context.getEvent()
            .reply(InteractionApplicationCommandCallbackSpec.builder().addEmbed(embed.build()).build())
            .thenReturn(context);
    }

    @Override
    public UserInteractionContextBuilder setRequestData(UserInteractionContextBuilder builder) {
        // You DO NOT need to call everything like this, some of these methods imply others and calling
        //  all of them is redundant. ex: requireTargetMember also gets the target user.
        // This is done as a form of test.
        return builder.requireGuild()
            .requireChannel().requireGuildChannel()
            .requireTargetUser().requireTargetMember()
            .requireCallingUser().requireCallingMember();
    }
}
