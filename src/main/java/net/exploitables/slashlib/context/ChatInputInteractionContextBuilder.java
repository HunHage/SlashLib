package net.exploitables.slashlib.context;

import discord4j.core.event.domain.interaction.ChatInputInteractionEvent;
import discord4j.core.object.command.ApplicationCommandInteraction;
import discord4j.core.object.command.ApplicationCommandInteractionOption;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.object.entity.channel.TopLevelGuildChannel;
import net.exploitables.slashlib.utility.OptionsList;
import reactor.core.publisher.Mono;

import java.util.List;

/**
 * A builder class provided to chat input commands before the command logic is called.
 */
public class ChatInputInteractionContextBuilder extends ContextBuilder {
    final ChatInputInteractionEvent event;
    final ApplicationCommandInteraction aci;
    final OptionsList options;

    public ChatInputInteractionContextBuilder(ChatInputInteractionEvent event,
                                              ApplicationCommandInteraction aci,
                                              List<ApplicationCommandInteractionOption> options) {
        this.event = event;
        this.aci = aci;
        this.options = new OptionsList(options);

        // Certainly an area for improvement
        // Due to how collectData() works an error is thrown if Mono#zip() returns empty
        // This is because some methods of collecting data like requireGuildChannel() can go empty without error
        // So at least one entry must exist for commands that require no data
        this.requiredMonoList.add(Mono.just(1));
    }

    public ChatInputInteractionContext build() {
        return new ChatInputInteractionContext(this);
    }

    /**
     * Mark that the guild is required for command execution.
     * This method will collect the:
     * guild
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public ChatInputInteractionContextBuilder requireGuild() {
        requiredMonoList.add(event.getInteraction().getGuild()
            .doOnNext(guild -> this.guild = guild)
            .map(guild -> 1));
        return this;
    }

    /**
     * Mark that the {@link MessageChannel} the command was called in is required for command execution.
     * This method will collect the:
     * messageChannel
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public ChatInputInteractionContextBuilder requireMessageChannel() {
        requiredMonoList.add(event.getInteraction().getChannel()
            .doOnNext(messageChannel -> this.messageChannel = messageChannel)
            .map(messageChannel -> 1));
        return this;
    }

    /**
     * Mark that the {@link GuildChannel} the command was called in is required for command execution.
     * This method will collect the:
     * messageChannel
     * guildChannel
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public ChatInputInteractionContextBuilder requireTopLevelGuildChannel() {
        requiredMonoList.add(event.getInteraction().getChannel()
            .doOnNext(messageChannel -> this.messageChannel = messageChannel)
            .ofType(TopLevelGuildChannel.class)
            .doOnNext(guildChannel -> this.topLevelGuildChannel = guildChannel)
            .map(guildChannel -> 1));
        return this;
    }

    /**
     * Mark that the {@link User} the command was called by is required for command execution.
     * This method will collect the:
     * callingUser
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public ChatInputInteractionContextBuilder requireUser() {
        requiredMonoList.add(Mono.justOrEmpty(event.getInteraction().getUser())
            .doOnNext(user -> this.user = user)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} the command was called by is required for command execution.
     * This method will collect the:
     * callingUserAsMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public ChatInputInteractionContextBuilder requireMember() {
        requiredMonoList.add(Mono.justOrEmpty(event.getInteraction().getMember())
            .doOnNext(member -> this.member = member)
            .map(member -> 1));
        return this;
    }
}
