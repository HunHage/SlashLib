package net.exploitables.slashlib.context;

import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.object.entity.channel.TopLevelGuildChannel;
import reactor.util.annotation.NonNull;
import reactor.util.annotation.Nullable;

import java.util.Optional;

/**
 * Superclass for context provided during user logic part of interaction lifecycle.
 */
public abstract class Context {
    protected final @Nullable Guild guild;
    protected final @Nullable MessageChannel messageChannel;
    protected final @Nullable TopLevelGuildChannel topLevelGuildChannel;
    protected final @NonNull  User user;
    protected final @Nullable Member member;

    protected final boolean allRequestedDataExists;

    Context(ContextBuilder builder) {
        this.guild                  = builder.guild;
        this.messageChannel         = builder.messageChannel;
        this.topLevelGuildChannel   = builder.topLevelGuildChannel;
        this.user                   = builder.user;
        this.member                 = builder.member;
        this.allRequestedDataExists = builder.allRequestedDataExists;
    }

    /**
     * @return The {@link Guild} this interaction was called in.
     */
    public final Optional<Guild> getGuild() { return Optional.ofNullable(guild); }

    /**
     * @return The {@link MessageChannel} this interaction was called in.
     */
    public final Optional<MessageChannel> getMessageChannel() { return Optional.ofNullable(messageChannel); }

    /**
     * @return The {@link TopLevelGuildChannel} this interaction was called in.
     */
    public final Optional<TopLevelGuildChannel> getTopLevelGuildChannel() { return Optional.ofNullable(topLevelGuildChannel); }

    /**
     * @return The {@link User} who called this interaction.
     *         Always present, provided by the event.
     */
    @NonNull
    public final User getUser() { return user; }

    /**
     * @return The {@link Member} for the {@link Context#user} who called this interaction.
     */
    public final Optional<Member> getMember() { return Optional.ofNullable(member); }

    /**
     * @return true if all data requested by the command was retrieved successfully
     */
    public final boolean doesAllRequestedDataExist() { return allRequestedDataExists; }
}
