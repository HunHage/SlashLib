package net.exploitables.slashlib;

import discord4j.core.GatewayDiscordClient;
import discord4j.core.event.EventDispatcher;
import discord4j.core.event.domain.interaction.SlashCommandEvent;
import net.exploitables.slashlib.commands.BaseCommand;

import java.util.List;

public class SlashLib {
    private CommandRegister commandRegister;
    private SlashCommandEventReceiver receiver;

    private SlashLib() {
        this.commandRegister = null;
        this.receiver = null;
    }

    /**
     * Create an instance of SlashLib with the default components. This will do some verification on the commands
     *  provided and assert they are the proper classes.
     * @param commands a list of GroupCommands and TopCommands for the bot
     * @return a new instance of SlashLib which can be used to process commands
     */
    public static SlashLib create(List<BaseCommand> commands) {
        SlashLib slashLib = new SlashLib();
        slashLib.commandRegister = CommandRegister.create(commands);
        slashLib.receiver = new SlashCommandEventReceiverImpl(slashLib);
        return slashLib;
    }

    static SlashLib create(SlashLibBuilder builder) {
        SlashLib slashLib = new SlashLib();
        if (builder.receiver == null) {
            slashLib.receiver = new SlashCommandEventReceiverImpl(slashLib);
        }
        slashLib.commandRegister = CommandRegister.create(builder.commands);
        return slashLib;
    }

    /**
     * Register this instance with an {@link EventDispatcher} to handle {@link SlashCommandEvent}s
     * @param eventDispatcher the {@link EventDispatcher} to be used with the bots future {@link GatewayDiscordClient}
     */
    public void registerAsListener(EventDispatcher eventDispatcher) {
        eventDispatcher.on(SlashCommandEvent.class, receiver::receiveSlashCommandEvent).subscribe();
    }

    /**
     * @return the {@link CommandRegister} used by this instance
     */
    public CommandRegister getCommandRegister() { return commandRegister; }
}
