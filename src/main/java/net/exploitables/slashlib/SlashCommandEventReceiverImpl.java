package net.exploitables.slashlib;


import discord4j.core.event.domain.interaction.ChatInputInteractionEvent;
import discord4j.core.object.entity.channel.GuildChannel;
import net.exploitables.slashlib.context.SlashCommandContext;
import net.exploitables.slashlib.context.SlashCommandContextBuilder;
import reactor.core.publisher.Mono;

public class SlashCommandEventReceiverImpl implements SlashCommandEventReceiver {
    public Mono<SlashCommandContext> receiveSlashCommandEvent(ChatInputInteractionEvent event) {
        return Mono.justOrEmpty(event.getInteraction().getCommandInteraction())
            // Get the command and options
            .flatMap(aci -> Mono.just(SlashLib.get().getCommandRegister().getCommandStructure().searchForChatCommand(aci))
                // Check bot permissions in guild
                .flatMap(pair -> event.getInteraction()
                    .getChannel()
                    .ofType(GuildChannel.class)
                    .flatMap(gc -> gc.getEffectivePermissions(event.getClient().getSelfId()))
                    .filter(perms -> perms.containsAll(pair.getKey().getBotPermissions()))
                    // No perms, send silent error message
                    .switchIfEmpty(event.reply("I need the following permissions for that command: " +
                        pair.getKey().getBotPermissions().asEnumSet())
                        .withEphemeral(true)
                        .then(Mono.empty()))
                    // Have perms, create the builder and collect data
                    .flatMap(_perms -> pair.getKey().setRequestData(new SlashCommandContextBuilder(event, aci, pair.getValue()))
                        .collectData()
                        .map(SlashCommandContextBuilder::build)
                        // Call the command
                        .flatMap(context -> pair.getKey().executeChat(context)))));
}
}
