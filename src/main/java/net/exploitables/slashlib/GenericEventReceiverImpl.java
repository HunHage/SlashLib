package net.exploitables.slashlib;


import discord4j.core.event.domain.interaction.ChatInputInteractionEvent;
import discord4j.core.event.domain.interaction.DeferrableInteractionEvent;
import discord4j.core.event.domain.interaction.MessageInteractionEvent;
import discord4j.core.event.domain.interaction.UserInteractionEvent;
import discord4j.core.object.entity.channel.GuildChannel;
import net.exploitables.slashlib.commands.BaseCommand;
import net.exploitables.slashlib.context.*;
import reactor.core.publisher.Mono;

public class GenericEventReceiverImpl<
        IC extends ChatInputContext, IB extends ChatInputContextBuilder,
        MC extends MessageContext, MB extends MessageContextBuilder,
        UC extends UserContext, UB extends UserContextBuilder
        > implements GenericEventReceiver<IC, UC, MC> {

    protected final GenericSlashLib<IC, IB, MC, MB, UC, UB> genericSlashLib;

    public GenericEventReceiverImpl(GenericSlashLib<IC, IB, MC, MB, UC, UB> genericSlashLib) {
        this.genericSlashLib = genericSlashLib;
    }

    private <E extends DeferrableInteractionEvent, B extends BaseCommand> Mono<Boolean> checkPermissions(E event, B baseCommand) {
        return event.getInteraction()
            .getChannel()
            .ofType(GuildChannel.class)
            .flatMap(gc -> gc.getEffectivePermissions(event.getClient().getSelfId()))
            .map(perms -> perms.containsAll(baseCommand.getBotPermissions()))
            .switchIfEmpty(Mono.just(false))
            .filter(havePerms -> havePerms || baseCommand.isUsableInDMs())
            // No perms and not usable in DMs, send silent error message
            .switchIfEmpty(Mono.defer(() -> {
                String content;
                if (!baseCommand.getBotPermissions().isEmpty()) {
                    content = "I need the following permissions for that command: " +
                            baseCommand.getBotPermissions().asEnumSet();
                } else {
                    content = "That is not usable in DMs.";
                }
                // .then(Mono.empty()) for type compatibility
                return event.reply(content).withEphemeral(true).then(Mono.empty());
            }));
    }

    @Override
    public Mono<IC> receiveChatInputInteractionEvent(ChatInputInteractionEvent event) {
        // We need the command interaction to get the options
        return Mono.justOrEmpty(event.getInteraction().getCommandInteraction())
            // Get the command, we use the helper method on the command Structure to get this as
            //  chat input commands care multi-level
            .flatMap(aci -> Mono.just(genericSlashLib.getCommandRegister().getCommandStructure().searchForChatCommand(aci))
                // Check bot permissions in guild
                .flatMap(pair -> checkPermissions(event, pair.getKey())
                    // Have perms, create the builder and collect data
                    .flatMap(_bool -> {
                        try {
                            return pair.getKey()
                                .setRequestData(genericSlashLib.getChatInputContextBuilderConstructor().newInstance(event, aci, pair.getValue()))
                                .collectData();
                        } catch (Exception e) {
                            return Mono.error(e);
                        }
                    })
                    .ofType(genericSlashLib.getChatInputContextBuilderClass())
                    .map(ChatInputContextBuilder::build)
                    .ofType(genericSlashLib.getChatInputContextClass())
                    // Call the command
                    .flatMap(context -> pair.getKey().executeChat(context))));
}

    @Override
    public Mono<UC> receiveUserInteractionEvent(UserInteractionEvent event) {
        // Since User Interactions are only top level we can just get our command by the name
        return Mono.just(genericSlashLib.getCommandRegister().getCommandStructure().getUserCommands().get(event.getCommandName()))
            // Check bot permissions in guild
            .flatMap(userCommand -> checkPermissions(event, userCommand)
                // Have perms, create the builder and collect data
                .flatMap(_bool -> {
                    try {
                        return userCommand.setRequestData(genericSlashLib.getUserContextBuilderConstructor().newInstance(event))
                            .collectData();
                    } catch (Exception e) {
                        return Mono.error(e);
                    }
                })
                .ofType(genericSlashLib.getUserContextBuilderClass())
                .map(UserContextBuilder::build)
                .ofType(genericSlashLib.getUserContextClass())
                // Call the command
                .flatMap(userCommand::executeUser));
    }

    @Override
    public Mono<MC> receiveMessageInteractionEvent(MessageInteractionEvent event) {
        // Since User Interactions are only top level we can just get our command by the name
        return Mono.just(genericSlashLib.getCommandRegister().getCommandStructure().getMessageCommands().get(event.getCommandName()))
            // Check bot permissions in guild
            .flatMap(messageCommand -> checkPermissions(event, messageCommand)
                // Have perms, create the builder and collect data
                .flatMap(_bool -> {
                    try {
                        return messageCommand.setRequestData(genericSlashLib.getMessageContextBuilderConstructor().newInstance(event))
                            .collectData();
                    } catch (Exception e) {
                        return Mono.error(e);
                    }
                })
                .ofType(genericSlashLib.getMessageContextBuilderClass())
                .map(MessageContextBuilder::build)
                .ofType(genericSlashLib.getMessageContextClass())
                // Call the command
                .flatMap(messageCommand::executeMessage));
    }
}
