package net.exploitables.slashlib;

import discord4j.discordjson.json.ApplicationCommandData;
import discord4j.discordjson.json.ApplicationCommandRequest;
import discord4j.discordjson.possible.Possible;
import discord4j.rest.service.ApplicationService;
import net.exploitables.slashlib.commands.BaseCommand;
import net.exploitables.slashlib.commands.GroupCommand;
import net.exploitables.slashlib.commands.InvalidCommandLocationException;
import net.exploitables.slashlib.commands.TopCommand;
import reactor.util.Logger;
import reactor.util.Loggers;

import java.util.List;
import java.util.Map;
import java.util.Objects;

public class CommandRegister {
    private static final Logger logger = Loggers.getLogger(CommandRegister.class);

    private final CommandStructure commands;

    protected CommandRegister() {
        this.commands = new CommandStructure();
    }

    /**
     * Create a new CommandRegister with a list of commands.
     * @param commandList a list of commands which must be an instance of {@link TopCommand} or {@link GroupCommand}
     * @return a new CommandRegister instance
     */
    static CommandRegister create(List<BaseCommand> commandList) {
        logger.debug("Creating CommandRegister");
        CommandRegister commandRegister = new CommandRegister();
        for (BaseCommand command : commandList) {
            logger.debug("Adding Top Level Command: " + command.getName());
            if (!(command instanceof TopCommand || command instanceof GroupCommand)) {
                throw new InvalidCommandLocationException(command, commandRegister.commands, "TopCommand or GroupCommand");
            }
            commandRegister.commands.addSubCommand(command);
        }
        logger.debug("CommandRegister created");
        return commandRegister;
    }

    /**
     * Synchronize the slash commands registered on Discord to match our local commands.
     *
     * @param applicationService the bots {@link ApplicationService}
     * @param applicationId the bots Application ID, must match the service
     * @return the number of slash commands created/modified/deleted
     */
    public int registerSlashCommands(ApplicationService applicationService, long applicationId) {
        logger.debug("Registering slash commands with Discord");
        int changes = 0;

        Map<String, ApplicationCommandData> discordCmds = applicationService
            .getGlobalApplicationCommands(applicationId)
            .collectMap(ApplicationCommandData::name)
            .block();
        // TODO: Need to check what happens when no slash commands are registered
        Objects.requireNonNull(discordCmds, "Couldn't get Global Application Commands from Discord");

        // Create/Update commands
        for (BaseCommand botCmd : commands.getSubCommands().values()) {
            ApplicationCommandRequest request = botCmd.asRequest();
            // Command doesn't exist discord side, create it
            if (discordCmds.get(botCmd.getName()) == null) {
                logger.info("Creating Command: " + botCmd.getName());
                applicationService.createGlobalApplicationCommand(applicationId, request).block();
                changes++;
                continue;
            }
            // Command exists discord side, check if it's equal to the bot command
            ApplicationCommandData discordCmd = discordCmds.get(botCmd.getName());
            if (!commandDataEqualsRequest(discordCmd, request)) {
                logger.info("Updating Command: " + discordCmd.name());
                applicationService.modifyGlobalApplicationCommand(applicationId, Long.parseLong(discordCmd.id()), request).block();
                changes++;
            }
        }

        // Delete removed commands
        for (ApplicationCommandData discordCmd : discordCmds.values()) {
            if (commands.getSubCommands().get(discordCmd.name()) == null) {
                logger.info("Deleting Command: " + discordCmd.name());
                applicationService.deleteGlobalApplicationCommand(applicationId, Long.parseLong(discordCmd.id())).block();
                changes++;
            }
        }

        logger.info("Created/Updated/Deleted " + changes + " slash commands");
        return changes;
    }

    /**
     * Check if a slash commands data returned by Discord matches the local slash command request.
     * The names of each parameter should be the same.
     *
     * @param acd the {@link ApplicationCommandData} returned by Discord for a slash command
     * @param acr the {@link ApplicationCommandRequest} created for the same slash command locally
     * @return true if the local slash command is equal to the one registered on Discord
     */
    private boolean commandDataEqualsRequest(ApplicationCommandData acd, ApplicationCommandRequest acr) {
        if (!(acr.name().equals(acd.name())
            && acr.description().equals(acd.description())
            && defaultPermissionEquals(acr.defaultPermission(), acd.defaultPermission()) )) {
            return false;
        }

        if (!acd.options().isAbsent() && !acr.options().isAbsent()) { // Both have options
            return acd.options().get().equals(acr.options().get());
        } else { // If both don't have options return true, otherwise false
            return acd.options().isAbsent() && acr.options().isAbsent();
        }
    }

    /**
     * The default permission must be set in the {@link ApplicationCommandRequest} but doesn't have to be present
     * in a {@link ApplicationCommandData}. This checks for equivalency between the two.
     *
     * @param p1 a Possible representing the default permission value
     * @param p2 a Possible representing the default permission value
     * @return true if the two possibles are equivalent in the context of being set for the default permission
     */
    private boolean defaultPermissionEquals(Possible<Boolean> p1, Possible<Boolean> p2) {
        // The data may not have the permission value present due to behavior as of D4J v3.2.0-RC2
        // By default, D4J will set the requests' default permission to true

        // Each half will return true if the value itself is true or if it is not present (two states for true)
        //  it will return false only when the value itself is false
        // In total this statement will return true only if the values equate to the default permission being true,
        //  or both values are false
        return p1.toOptional().orElse(true) == p2.toOptional().orElse(true);
    }

    public CommandStructure getCommands() { return commands; }
}
