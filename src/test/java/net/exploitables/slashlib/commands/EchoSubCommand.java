package net.exploitables.slashlib.commands;

import discord4j.core.object.command.ApplicationCommandInteractionOption;
import discord4j.core.object.command.ApplicationCommandInteractionOptionValue;
import discord4j.discordjson.json.ApplicationCommandOptionData;
import discord4j.rest.util.ApplicationCommandOptionType;
import net.exploitables.slashlib.context.SlashCommandContext;
import net.exploitables.slashlib.context.SlashCommandContextBuilder;
import net.exploitables.slashlib.utility.OptionsList;
import reactor.core.publisher.Mono;

// This is not a required or endorsed way to handle command options for this lib or Discord4J
class EchoSubCommandOptions {
    final String content;
    final boolean ephemeral;

    EchoSubCommandOptions(OptionsList optionsList) {
        // Should always be present, so it should be safe to call get
        //noinspection OptionalGetWithoutIsPresent
        this.content = optionsList.getOption("content")
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asString)
            .get();
        // This may not be present, so we will provide a default value for our use case
        this.ephemeral = optionsList.getOption("private")
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asBoolean)
            .orElse(false);
    }
}

// This is a duplicate class of EchoCommand that is usable as a sub command instead.
public class EchoSubCommand extends SubCommand {
    public EchoSubCommand() {
        super("echo", "echo a message back to you");
        this.addOption(ApplicationCommandOptionData.builder()
            .name("content")
            .description("echos this content back as a response")
            .required(true)
            .type(ApplicationCommandOptionType.STRING.getValue())
            .build());
        this.addOption(ApplicationCommandOptionData.builder()
            .name("private")
            .description("reply with a message only you can see")
            //.required(false)
            .type(ApplicationCommandOptionType.BOOLEAN.getValue())
            .build());
    }

    @Override
    public Mono<SlashCommandContext> execute(SlashCommandContext context) {
        EchoSubCommandOptions options = new EchoSubCommandOptions(context.getOptions());
        return context.getEvent().reply(options.content).withEphemeral(options.ephemeral).thenReturn(context);
    }

    @Override
    public SlashCommandContextBuilder setRequestData(SlashCommandContextBuilder context) {
        return context;
    }
}
