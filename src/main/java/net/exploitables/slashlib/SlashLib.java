package net.exploitables.slashlib;

import discord4j.core.GatewayDiscordClient;
import discord4j.core.event.EventDispatcher;
import discord4j.core.event.domain.interaction.SlashCommandEvent;
import discord4j.core.object.entity.channel.GuildChannel;
import net.exploitables.slashlib.commands.BaseCommand;
import net.exploitables.slashlib.context.SlashCommandContext;
import net.exploitables.slashlib.context.SlashCommandContextBuilder;
import reactor.core.publisher.Mono;

import java.util.List;

public class SlashLib {
    private CommandRegister commandRegister;

    private SlashLib() {
        this.commandRegister = null;
    }

    SlashLib(SlashLibBuilder builder) {
        this.commandRegister = builder.commandRegister;
    }

    /**
     * Create an instance of SlashLib with the default components. This will do some verification on the commands
     *  provided and assert they are the proper classes.
     * @param commands a list of GroupCommands and TopCommands for the bot
     * @return a new instance of SlashLib which can be used to process commands
     */
    public static SlashLib create(List<BaseCommand> commands) {
        SlashLib slashLib = new SlashLib();
        slashLib.commandRegister = CommandRegister.create(commands);
        return slashLib;
    }

    SlashLib create(SlashLibBuilder builder) {
        return new SlashLib(builder);
    }

    public Mono<SlashCommandContext> receiveSlashCommandEvent(SlashCommandEvent event) {
        return Mono.justOrEmpty(event.getInteraction().getCommandInteraction())
            // Get the command and options
            .flatMap(aci -> Mono.just(commandRegister.getCommands().searchForCommand(aci))
                // Check bot permissions in guild
                .flatMap(pair -> event.getInteraction()
                    .getChannel()
                    .ofType(GuildChannel.class)
                    .flatMap(gc -> gc.getEffectivePermissions(event.getClient().getSelfId()))
                    .filter(perms -> perms.containsAll(pair.getKey().getBotPermissions()))
                    // No perms, send silent error message
                    .switchIfEmpty(event.reply("I need the following permissions for that command: " +
                            pair.getKey().getBotPermissions().asEnumSet())
                        .withEphemeral(true)
                        .then(Mono.empty()))
                    // Have perms, create the builder and collect data
                    .flatMap(_perms -> pair.getKey().setRequestData(new SlashCommandContextBuilder(event, aci, pair.getValue()))
                    .collectData()
                    .map(SlashCommandContextBuilder::build)
                    // Call the command
                    .flatMap(context -> pair.getKey().execute(context)))));
    }

    /**
     * Register this instance with an {@link EventDispatcher} to handle {@link SlashCommandEvent}s
     * @param eventDispatcher the {@link EventDispatcher} to be used with the bots future {@link GatewayDiscordClient}
     */
    public void registerAsListener(EventDispatcher eventDispatcher) {
        eventDispatcher.on(SlashCommandEvent.class, this::receiveSlashCommandEvent).subscribe();
    }

    /**
     * @return the {@link CommandRegister} used by this instance
     */
    public CommandRegister getCommandRegister() { return commandRegister; }
}
