package net.exploitables.slashlib.commands;

import discord4j.core.object.command.ApplicationCommandOption;
import discord4j.discordjson.json.ApplicationCommandOptionData;
import net.exploitables.slashlib.context.ChatInputContext;
import net.exploitables.slashlib.context.ChatInputContextBuilder;
import net.exploitables.slashlib.utility.OptionsList;
import reactor.core.publisher.Mono;

class EchoSubCommandOptions {
    final String content;
    final boolean ephemeral;

    EchoSubCommandOptions(OptionsList optionsList) {
        // Should always be present, so it should be safe to call get
        //noinspection OptionalGetWithoutIsPresent
        this.content = optionsList.getString("content").get();
        // This may not be present, so we will provide a default value for our use case
        this.ephemeral = optionsList.getBoolean("private").orElse(false);
    }
}

// This is a duplicate class of EchoCommand that is usable as a sub command instead.
public class EchoSubCommand extends GenericSubCommand {
    public EchoSubCommand() {
        super("echo", "echo a message back to you");
        this.addOption(ApplicationCommandOptionData.builder()
            .name("content")
            .description("echos this content back as a response")
            .required(true)
            .type(ApplicationCommandOption.Type.STRING.getValue())
            .build());
        this.addOption(ApplicationCommandOptionData.builder()
            .name("private")
            .description("reply with a message only you can see")
            //.required(false)
            .type(ApplicationCommandOption.Type.BOOLEAN.getValue())
            .build());
    }

    @Override
    public Mono<ChatInputContext> executeChat(ChatInputContext context) {
        EchoSubCommandOptions options = new EchoSubCommandOptions(context.getOptions());
        return context.getEvent().reply(options.content).withEphemeral(options.ephemeral).thenReturn(context);
    }

    @Override
    public ChatInputContextBuilder setRequestData(ChatInputContextBuilder context) {
        return context;
    }
}
