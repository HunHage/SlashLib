package net.exploitables.slashlib.context;

import discord4j.core.event.domain.interaction.MessageInteractionEvent;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.Message;
import discord4j.core.object.entity.User;

/**
 * The base context provided to a Message Command (context menu).
 * Created from the required data set by the command in a {@link MessageContextBuilder}
 */
public class MessageContext extends Context {
    private final MessageInteractionEvent event;

    private final Message targetMessage;
    private final User messageAuthor;
    private final Member messageAuthorAsMember;

    public MessageContext(MessageContextBuilder builder) {
        super(builder);

        this.event                  = builder.event;

        this.targetMessage          = builder.targetMessage;
        this.messageAuthor          = builder.messageAuthor;
        this.messageAuthorAsMember  = builder.messageAuthorAsMember;
    }

    /**
     * @return the {@link MessageInteractionEvent} which corresponding to this interaction
     */
    public MessageInteractionEvent getEvent() {
        return event;
    }

    /**
     * @return the {@link Message} this interaction was called on *if requested*
     */
    public Message getTargetMessage() {
        return targetMessage;
    }

    /**
     * @return the {@link User} who authored the {@link Message} this interaction was called on *if requested*
     */
    public User getMessageAuthor() {
        return messageAuthor;
    }

    /**
     * @return the {@link Member} who authored the {@link Message} this interaction was called on *if requested*
     */
    public Member getMessageAuthorAsMember() {
        return messageAuthorAsMember;
    }
}
