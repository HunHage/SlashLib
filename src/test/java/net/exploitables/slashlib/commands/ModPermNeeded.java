package net.exploitables.slashlib.commands;

import discord4j.core.spec.EmbedCreateSpec;
import discord4j.core.spec.InteractionApplicationCommandCallbackSpec;
import net.exploitables.slashlib.context.ChatInputContext;
import net.exploitables.slashlib.context.ChatInputContextBuilder;
import reactor.core.publisher.Mono;

/**
 * A command that requires a permission to be set to be called.
 */
public class ModPermNeeded extends GenericTopCommand {
    public ModPermNeeded() {
        super("modpermneeded", "a command that needs the moderator role permission to be set with /setmodrole");
        setDefaultPermissionFalse();
    }

    @Override
    public Mono<ChatInputContext> executeChat(ChatInputContext context) {
        return context.getEvent()
            .reply(
                InteractionApplicationCommandCallbackSpec.builder()
                    .addEmbed(EmbedCreateSpec.builder()
                        .author(
                            context.getMember().getDisplayName() +
                                "`ID:" + context.getMember().getId().asString() + "`",
                            null,
                            context.getMember().getAvatarUrl())
                        .title(context.getGuild().getName() + "`ID:" + context.getGuild().getId().asString() + "`")
                        .description(
                            context.getTopLevelGuildChannel().getName() +
                                "`ID:" + context.getTopLevelGuildChannel().getId().asString() + "`")
                        .build())
                    .build())
            .thenReturn(context);
    }

    @Override
    public ChatInputContextBuilder setRequestData(ChatInputContextBuilder context) {
        return context.requireGuild().requireTopLevelGuildChannel().requireMember();
    }
}
