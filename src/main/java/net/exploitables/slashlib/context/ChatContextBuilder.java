package net.exploitables.slashlib.context;

import discord4j.core.event.domain.interaction.ChatInputInteractionEvent;
import discord4j.core.object.command.ApplicationCommandInteraction;
import discord4j.core.object.command.ApplicationCommandInteractionOption;
import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.object.entity.channel.TopLevelGuildChannel;
import net.exploitables.slashlib.utility.OptionsList;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

import java.util.List;

/**
 * A builder class provided to chat input commands before the command logic is called.
 */
public class ChatContextBuilder extends ContextBuilder {
    protected final @NonNull ChatInputInteractionEvent event;
    protected final @NonNull ApplicationCommandInteraction aci;
    protected final @NonNull OptionsList options;

    public ChatContextBuilder(@NonNull ChatInputInteractionEvent event,
                              @NonNull ApplicationCommandInteraction aci,
                              @NonNull List<ApplicationCommandInteractionOption> options) {
        super(event.getInteraction().getUser());

        this.event      = event;
        this.aci        = aci;
        this.options    = new OptionsList(options);
    }

    @Override
    public ChatContext build() {
        return new ChatContext(this);
    }

    /**
     * Mark that the {@link Guild} the command was called in is required for command execution.
     * This method will collect the:
     * guild
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public ChatContextBuilder requireGuild() {
        requiredMonoList.add(event.getInteraction().getGuild()
            .doOnNext(guild -> this.guild = guild)
            .map(guild -> 1));
        return this;
    }

    /**
     * Mark that the {@link Guild} the command was called in is optionally used for command execution.
     * This method will collect the:
     * guild
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    @Override
    public ChatContextBuilder requestGuild() {
        requestMonoList.add(event.getInteraction().getGuild()
            .doOnNext(guild -> this.guild = guild)
            .map(guild -> 1));
        return this;
    }

    /**
     * Mark that the {@link MessageChannel} the command was called in is required for command execution.
     * This method will collect the:
     * messageChannel
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public ChatContextBuilder requireMessageChannel() {
        requiredMonoList.add(event.getInteraction().getChannel()
            .doOnNext(messageChannel -> this.messageChannel = messageChannel)
            .map(messageChannel -> 1));
        return this;
    }

    /**
     * Mark that the {@link MessageChannel} the command was called in is optionally used for command execution.
     * This method will collect the:
     * messageChannel
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    @Override
    public ChatContextBuilder requestMessageChannel() {
        requestMonoList.add(event.getInteraction().getChannel()
            .doOnNext(messageChannel -> this.messageChannel = messageChannel)
            .map(messageChannel -> 1));
        return this;
    }

    /**
     * Mark that the {@link GuildChannel} the command was called in is required for command execution.
     * This method will collect the:
     * messageChannel
     * guildChannel
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public ChatContextBuilder requireTopLevelGuildChannel() {
        requiredMonoList.add(event.getInteraction().getChannel()
            .doOnNext(messageChannel -> this.messageChannel = messageChannel)
            .ofType(TopLevelGuildChannel.class)
            .doOnNext(guildChannel -> this.topLevelGuildChannel = guildChannel)
            .map(guildChannel -> 1));
        return this;
    }

    /**
     * Mark that the {@link GuildChannel} the command was called in is optionally used for command execution.
     * This method will collect the:
     * messageChannel
     * guildChannel
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    @Override
    public ChatContextBuilder requestTopLevelGuildChannel() {
        requestMonoList.add(event.getInteraction().getChannel()
            .doOnNext(messageChannel -> this.messageChannel = messageChannel)
            .ofType(TopLevelGuildChannel.class)
            .doOnNext(guildChannel -> this.topLevelGuildChannel = guildChannel)
            .map(guildChannel -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} the command was called by is required for command execution.
     * This method will collect the:
     * callingUserAsMember
     *
     * If the data cannot be collected then a {@link DataMissingException} will be thrown.
     * @return this instance
     */
    @Override
    public ChatContextBuilder requireMember() {
        requiredMonoList.add(Mono.justOrEmpty(event.getInteraction().getMember())
            .doOnNext(member -> this.member = member)
            .map(member -> 1));
        return this;
    }

    /**
     * Mark that the {@link Member} the command was called by is optionally used for command execution.
     * This method will collect the:
     * callingUserAsMember
     *
     * If the data cannot be collected then {@link Context#doesAllRequestedDataExist()} will return false.
     * @return this instance
     */
    @Override
    public ChatContextBuilder requestMember() {
        requestMonoList.add(Mono.justOrEmpty(event.getInteraction().getMember())
            .doOnNext(member -> this.member = member)
            .map(member -> 1));
        return this;
    }
}
