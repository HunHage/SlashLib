package net.exploitables.slashlib.examples;

import discord4j.core.DiscordClient;
import discord4j.core.GatewayDiscordClient;
import discord4j.core.event.EventDispatcher;
import net.exploitables.slashlib.SlashLib;
import net.exploitables.slashlib.SlashLibBuilder;
import net.exploitables.slashlib.commands.EchoCommand;
import net.exploitables.slashlib.commands.PingCommand;
import net.exploitables.slashlib.commands.TopLevelGroup;
import net.exploitables.slashlib.commands.message.MessageInfo;
import net.exploitables.slashlib.commands.user.UserInfo;

import java.util.Objects;

public class ExampleBasicUsage {
    private static DiscordClient discordClient;
    private static SlashLib slashLib;
    private static GatewayDiscordClient discordGateway;
    private static long applicationId;

    public static void main(String[] args) {
        // Setup Discord4J
        discordClient = DiscordClient.create(args[0]);
        EventDispatcher dispatcher = EventDispatcher.builder().build();

        // Setup Commands and SlashLib
        SlashLibBuilder slashLibBuilder = new SlashLibBuilder();
        // Add Chat Input commands
        slashLibBuilder.addChatCommand(new PingCommand());
        slashLibBuilder.addChatCommand(new EchoCommand());
        slashLibBuilder.addChatCommand(new TopLevelGroup());
        // Add User commands
        slashLibBuilder.addUserCommand(new UserInfo());
        // Add Message commands
        slashLibBuilder.addMessageCommand(new MessageInfo());
        slashLib = slashLibBuilder.build();
        slashLib.registerAsListener(dispatcher);

        // Login to discord
        discordGateway = discordClient.gateway()
            .setEventDispatcher(dispatcher)
            .login()
            .block();

        // Register Slash Commands
        Long nullableApplicationId = discordClient.getApplicationId().block();
        Objects.requireNonNull(nullableApplicationId);
        applicationId = nullableApplicationId;
        slashLib.getCommandRegister().registerCommands(discordClient.getApplicationService(), applicationId);

        // Block until disconnect
        discordGateway.onDisconnect().block();
    }

    public static DiscordClient getDiscordClient()          { return discordClient; }
    public static SlashLib getSlashLib()                    { return slashLib; }
    public static GatewayDiscordClient getDiscordGateway()  { return discordGateway; }
    public static long getApplicationId()                   { return applicationId; }
}
