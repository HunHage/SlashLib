package net.exploitables.slashlib;

import discord4j.core.event.domain.interaction.ChatInputInteractionEvent;
import discord4j.core.event.domain.interaction.MessageInteractionEvent;
import discord4j.core.event.domain.interaction.UserInteractionEvent;
import discord4j.core.object.command.ApplicationCommandInteraction;
import net.exploitables.slashlib.commands.InvalidCommandLocationException;
import net.exploitables.slashlib.commands.generic.*;
import net.exploitables.slashlib.context.*;

import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

/**
 * A builder for {@link GenericSlashLib} to customize the components of it.
 */
public class GenericSlashLibBuilder<
        IC extends ChatInputContext, IB extends ChatInputContextBuilder,
        MC extends MessageContext, MB extends MessageContextBuilder,
        UC extends UserContext, UB extends UserContextBuilder
        > {
    // Chat Input
    final Class<IC> chatInputContextClass;
    final Constructor<IC> chatInputContextConstructor;
    final Class<IB> chatInputContextBuilderClass;
    final Constructor<IB> chatInputContextBuilderConstructor;
    // Message
    final Class<MC> messageContextClass;
    final Constructor<MC> messageContextConstructor;
    final Class<MB> messageContextBuilderClass;
    final Constructor<MB> messageContextBuilderConstructor;
    // User
    final Class<UC> userContextClass;
    final Constructor<UC> userContextConstructor;
    final Class<UB> userContextBuilderClass;
    final Constructor<UB> userContextBuilderConstructor;

    // Interaction Handling
    Function<GenericSlashLib<IC, IB, MC, MB, UC, UB>, GenericEventReceiver<IC, UC, MC>> eventReceiverProducer;
    List<GenericChatCommand<IC, IB>> chatCommands;
    List<GenericUserCommand<UC, UB>> userCommands;
    List<GenericMessageCommand<MC, MB>> messageCommands;

    public GenericSlashLibBuilder(Class<IC> chatInputContextClass,
                                  Class<IB> chatInputContextBuilderClass,
                                  Class<MC> messageContextClass,
                                  Class<MB> messageContextBuilderClass,
                                  Class<UC> userContextClass,
                                  Class<UB> userContextBuilderClass)
            // Bad Bad Bad Bad Bad Bad Bad Bad
            throws NoSuchMethodException {

        // Chat Input
        this.chatInputContextClass = chatInputContextClass;
        this.chatInputContextConstructor = chatInputContextClass.getConstructor(
                ChatInputInteractionEvent.class,
                ApplicationCommandInteraction.class,
                List.class);
        this.chatInputContextBuilderClass = chatInputContextBuilderClass;
        this.chatInputContextBuilderConstructor = chatInputContextBuilderClass.getConstructor(
                ChatInputInteractionEvent.class,
                ApplicationCommandInteraction.class,
                List.class);

        // Message
        this.messageContextClass = messageContextClass;
        this.messageContextConstructor = messageContextClass.getConstructor(MessageInteractionEvent.class);
        this.messageContextBuilderClass = messageContextBuilderClass;
        this.messageContextBuilderConstructor = messageContextBuilderClass.getConstructor(MessageInteractionEvent.class);

        // User
        this.userContextClass = userContextClass;
        this.userContextConstructor = userContextClass.getConstructor(UserInteractionEvent.class);
        this.userContextBuilderClass = userContextBuilderClass;
        this.userContextBuilderConstructor = userContextBuilderClass.getConstructor(UserInteractionEvent.class);

        // Interaction Handling
        this.eventReceiverProducer = GenericEventReceiverImpl::new; // Default receiver
        this.chatCommands = new ArrayList<>();
        this.userCommands = new ArrayList<>();
        this.messageCommands = new ArrayList<>();
    }

    /**
     * Add a chat input command to be registered when building a new {@link GenericSlashLib}.
     * An assertion is done to verify the command is an instance of {@link GenericTopCommand} or {@link GenericGroupCommand}
     *
     * @param command the command to add to the {@link CommandRegister}
     * @return this instance
     */
    public GenericSlashLibBuilder<IC, IB, MC, MB, UC, UB> addChatCommand(GenericChatCommand<IC, IB> command) {
        if (!(command instanceof GenericTopCommand || command instanceof GenericTopGroupCommand)) {
            throw new InvalidCommandLocationException(command);
        }
        chatCommands.add(command);
        return this;
    }

    /**
     * Add a user command to be registered when building a new {@link GenericSlashLib}.
     *
     * @param command the command to add to the {@link CommandRegister}
     * @return this instance
     */
    public GenericSlashLibBuilder<IC, IB, MC, MB, UC, UB> addUserCommand(GenericUserCommand<UC, UB> command) {
        userCommands.add(command);
        return this;
    }

    /**
     * Add a message command to be registered when building a new {@link GenericSlashLib}.
     *
     * @param command the command to add to the {@link CommandRegister}
     * @return this instance
     */
    public GenericSlashLibBuilder<IC, IB, MC, MB, UC, UB> addMessageCommand(GenericMessageCommand<MC, MB> command) {
        messageCommands.add(command);
        return this;
    }

    /**
     * Provide the method of creating a new interaction event receiver, which is only used once.
     * The receiver should use the same generics as this class for IC, MC, and UC
     *
     * @param eventReceiverProducer the method called to produce a new interaction event receiver
     * @return this instance
     */
    public GenericSlashLibBuilder<IC, IB, MC, MB, UC, UB> setReceiver(Function<GenericSlashLib<IC, IB, MC, MB, UC, UB>, GenericEventReceiver<IC, UC, MC>> eventReceiverProducer) {
         this.eventReceiverProducer = eventReceiverProducer;
         return this;
    }

    /**
     * Create a new {@link GenericSlashLib} with the set values overriding the defaults.
     * @return a created {@link GenericSlashLib} instance from this builder
     */
    public GenericSlashLib<IC, IB, MC, MB, UC, UB> build() {
        return GenericSlashLib.create(this);
    }
}
